
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 17 20:22:36 BRT 2015
//----------------------------------------------------

package sintatico;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 17 20:22:36 BRT 2015
  */
public class RubyParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public RubyParser() {super();}

  /** Constructor which sets the default scanner. */
  public RubyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public RubyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\002\000" +
    "\002\017\002\000\002\020\002\000\002\004\011\000\002" +
    "\021\002\000\002\022\002\000\002\005\010\000\002\023" +
    "\002\000\002\024\002\000\002\005\006\000\002\005\002" +
    "\000\002\025\002\000\002\026\002\000\002\011\010\000" +
    "\002\027\002\000\002\030\002\000\002\013\011\000\002" +
    "\031\002\000\002\032\002\000\002\033\002\000\002\015" +
    "\014\000\002\034\002\000\002\035\002\000\002\014\010" +
    "\000\002\036\002\000\002\006\006\000\002\037\002\000" +
    "\002\006\006\000\002\040\002\000\002\041\002\000\002" +
    "\042\002\000\002\043\002\000\002\012\013\000\002\044" +
    "\002\000\002\045\002\000\002\016\007\000\002\016\003" +
    "\000\002\007\003\000\002\007\003\000\002\046\002\000" +
    "\002\047\002\000\002\010\007\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\022\002\ufff9\041\021\042\015\043\006\044" +
    "\005\047\ufff8\130\020\133\014\001\002\000\030\002\ufff9" +
    "\025\ufff9\032\ufff9\041\021\042\015\043\006\044\005\047" +
    "\ufff8\050\ufff9\130\020\133\014\001\002\000\006\127\uffeb" +
    "\130\uffeb\001\002\000\004\130\uffee\001\002\000\030\002" +
    "\ufff9\025\ufff9\032\ufff9\041\021\042\015\043\006\044\005" +
    "\047\ufff8\050\ufff9\130\020\133\014\001\002\000\004\047" +
    "\057\001\002\000\030\002\ufff9\025\ufff9\032\ufff9\041\021" +
    "\042\015\043\006\044\005\047\ufff8\050\ufff9\130\020\133" +
    "\014\001\002\000\030\002\ufff9\025\ufff9\032\ufff9\041\021" +
    "\042\015\043\006\044\005\047\ufff8\050\ufff9\130\020\133" +
    "\014\001\002\000\004\002\054\001\002\000\030\002\uffcf" +
    "\025\uffcf\032\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\047" +
    "\uffcf\050\uffcf\130\uffcf\133\uffcf\001\002\000\004\130\uffe8" +
    "\001\002\000\004\002\001\001\002\000\030\002\ufff9\025" +
    "\ufff9\032\ufff9\041\021\042\015\043\006\044\005\047\ufff8" +
    "\050\ufff9\130\020\133\014\001\002\000\004\110\uffd2\001" +
    "\002\000\004\130\uffe4\001\002\000\030\002\ufff9\025\ufff9" +
    "\032\ufff9\041\021\042\015\043\006\044\005\047\ufff8\050" +
    "\ufff9\130\020\133\014\001\002\000\012\002\uffff\025\uffff" +
    "\032\uffff\050\uffff\001\002\000\004\130\025\001\002\000" +
    "\022\041\uffe3\042\uffe3\043\uffe3\044\uffe3\047\uffe3\050\uffe3" +
    "\130\uffe3\133\uffe3\001\002\000\022\041\021\042\015\043" +
    "\006\044\005\047\ufff8\050\ufff9\130\020\133\014\001\002" +
    "\000\004\050\030\001\002\000\030\002\uffe2\025\uffe2\032" +
    "\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\047\uffe2\050\uffe2" +
    "\130\uffe2\133\uffe2\001\002\000\004\110\032\001\002\000" +
    "\004\127\uffd1\001\002\000\004\127\034\001\002\000\030" +
    "\002\uffd0\025\uffd0\032\uffd0\041\uffd0\042\uffd0\043\uffd0\044" +
    "\uffd0\047\uffd0\050\uffd0\130\uffd0\133\uffd0\001\002\000\012" +
    "\002\ufffa\025\ufffa\032\ufffa\050\ufffa\001\002\000\004\130" +
    "\037\001\002\000\004\051\040\001\002\000\004\130\uffe7" +
    "\001\002\000\004\130\042\001\002\000\006\052\uffd5\103" +
    "\uffd8\001\002\000\004\052\044\001\002\000\022\041\uffe6" +
    "\042\uffe6\043\uffe6\044\uffe6\047\uffe6\050\uffe6\130\uffe6\133" +
    "\uffe6\001\002\000\022\041\021\042\015\043\006\044\005" +
    "\047\ufff8\050\ufff9\130\020\133\014\001\002\000\004\050" +
    "\047\001\002\000\030\002\uffe5\025\uffe5\032\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\047\uffe5\050\uffe5\130\uffe5\133" +
    "\uffe5\001\002\000\004\103\051\001\002\000\004\130\uffd7" +
    "\001\002\000\004\130\042\001\002\000\004\052\uffd6\001" +
    "\002\000\004\002\000\001\002\000\012\002\ufffc\025\ufffc" +
    "\032\ufffc\050\ufffc\001\002\000\012\002\ufffd\025\ufffd\032" +
    "\ufffd\050\ufffd\001\002\000\006\127\061\130\062\001\002" +
    "\000\006\073\103\074\102\001\002\000\034\025\uffd3\032" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\073\uffd3\074\uffd3\130\uffd3\133\uffd3\001\002\000" +
    "\034\025\uffd4\032\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\046\uffd4\047\uffd4\050\uffd4\073\uffd4\074\uffd4\130\uffd4\133" +
    "\uffd4\001\002\000\026\025\ufff7\032\ufff7\041\ufff7\042\ufff7" +
    "\043\ufff7\044\ufff7\047\ufff7\050\ufff7\130\ufff7\133\ufff7\001" +
    "\002\000\026\025\ufff9\032\ufff9\041\021\042\015\043\006" +
    "\044\005\047\ufff8\050\ufff9\130\020\133\014\001\002\000" +
    "\010\025\ufff2\032\ufff5\050\uffef\001\002\000\004\032\075" +
    "\001\002\000\004\050\074\001\002\000\004\025\071\001" +
    "\002\000\022\041\ufff1\042\ufff1\043\ufff1\044\ufff1\047\ufff1" +
    "\050\ufff1\130\ufff1\133\ufff1\001\002\000\022\041\021\042" +
    "\015\043\006\044\005\047\ufff8\050\ufff9\130\020\133\014" +
    "\001\002\000\004\050\ufff0\001\002\000\030\002\ufff6\025" +
    "\ufff6\032\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\047\ufff6" +
    "\050\ufff6\130\ufff6\133\ufff6\001\002\000\006\127\061\130" +
    "\062\001\002\000\026\025\ufff4\032\ufff4\041\ufff4\042\ufff4" +
    "\043\ufff4\044\ufff4\047\ufff4\050\ufff4\130\ufff4\133\ufff4\001" +
    "\002\000\026\025\ufff9\032\ufff9\041\021\042\015\043\006" +
    "\044\005\047\ufff8\050\ufff9\130\020\133\014\001\002\000" +
    "\010\025\ufff2\032\ufff5\050\uffef\001\002\000\004\050\ufff3" +
    "\001\002\000\006\127\uffe1\130\uffe1\001\002\000\006\127" +
    "\uffdf\130\uffdf\001\002\000\006\127\061\130\062\001\002" +
    "\000\030\025\uffde\032\uffde\041\uffde\042\uffde\043\uffde\044" +
    "\uffde\046\uffde\047\uffde\050\uffde\130\uffde\133\uffde\001\002" +
    "\000\006\127\061\130\062\001\002\000\030\025\uffe0\032" +
    "\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\046\uffe0\047\uffe0" +
    "\050\uffe0\130\uffe0\133\uffe0\001\002\000\012\002\ufffb\025" +
    "\ufffb\032\ufffb\050\ufffb\001\002\000\004\130\112\001\002" +
    "\000\004\026\uffdd\001\002\000\022\041\uffed\042\uffed\043" +
    "\uffed\044\uffed\047\uffed\050\uffed\130\uffed\133\uffed\001\002" +
    "\000\022\041\021\042\015\043\006\044\005\047\ufff8\050" +
    "\ufff9\130\020\133\014\001\002\000\004\050\116\001\002" +
    "\000\030\002\uffec\025\uffec\032\uffec\041\uffec\042\uffec\043" +
    "\uffec\044\uffec\047\uffec\050\uffec\130\uffec\133\uffec\001\002" +
    "\000\004\026\120\001\002\000\004\127\uffdc\001\002\000" +
    "\004\127\122\001\002\000\004\106\uffdb\001\002\000\004" +
    "\106\124\001\002\000\004\127\uffda\001\002\000\004\127" +
    "\126\001\002\000\022\041\uffd9\042\uffd9\043\uffd9\044\uffd9" +
    "\047\uffd9\050\uffd9\130\uffd9\133\uffd9\001\002\000\006\127" +
    "\061\130\062\001\002\000\004\046\131\001\002\000\022" +
    "\041\uffea\042\uffea\043\uffea\044\uffea\047\uffea\050\uffea\130" +
    "\uffea\133\uffea\001\002\000\022\041\021\042\015\043\006" +
    "\044\005\047\ufff8\050\ufff9\130\020\133\014\001\002\000" +
    "\004\050\134\001\002\000\030\002\uffe9\025\uffe9\032\uffe9" +
    "\041\uffe9\042\uffe9\043\uffe9\044\uffe9\047\uffe9\050\uffe9\130" +
    "\uffe9\133\uffe9\001\002\000\012\002\ufffe\025\ufffe\032\ufffe" +
    "\050\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\024\002\012\003\015\004\021\010\016\011" +
    "\003\013\010\014\006\015\011\017\007\001\001\000\022" +
    "\003\134\004\021\010\016\011\003\013\010\014\006\015" +
    "\011\017\007\001\001\000\004\027\126\001\001\000\004" +
    "\025\110\001\001\000\022\003\107\004\021\010\016\011" +
    "\003\013\010\014\006\015\011\017\007\001\001\000\002" +
    "\001\001\000\022\003\055\004\021\010\016\011\003\013" +
    "\010\014\006\015\011\017\007\001\001\000\022\003\054" +
    "\004\021\010\016\011\003\013\010\014\006\015\011\017" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\035\001\001\000\002\001\001\000\022\003\034\004" +
    "\021\010\016\011\003\013\010\014\006\015\011\017\007" +
    "\001\001\000\004\046\030\001\001\000\004\034\023\001" +
    "\001\000\022\003\022\004\021\010\016\011\003\013\010" +
    "\014\006\015\011\017\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\025\001\001\000\022\003\026" +
    "\004\021\010\016\011\003\013\010\014\006\015\011\017" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\040\001\001\000\004\016\042\001" +
    "\001\000\004\044\047\001\001\000\002\001\001\000\004" +
    "\033\044\001\001\000\022\003\045\004\021\010\016\011" +
    "\003\013\010\014\006\015\011\017\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\051\001\001\000\004\016\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\062\007\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\063\001\001\000" +
    "\022\003\064\004\021\010\016\011\003\013\010\014\006" +
    "\015\011\017\007\001\001\000\010\005\066\021\065\023" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\071\001\001\000\022\003\072\004" +
    "\021\010\016\011\003\013\010\014\006\015\011\017\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\075\007\057\001\001\000\004\022\076\001\001\000\022" +
    "\003\077\004\021\010\016\011\003\013\010\014\006\015" +
    "\011\017\007\001\001\000\010\005\100\021\065\023\067" +
    "\001\001\000\002\001\001\000\004\036\105\001\001\000" +
    "\004\037\103\001\001\000\004\007\104\001\001\000\002" +
    "\001\001\000\004\007\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\112\001\001\000\004\040\116" +
    "\001\001\000\004\026\113\001\001\000\022\003\114\004" +
    "\021\010\016\011\003\013\010\014\006\015\011\017\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\120\001\001\000\002\001\001\000\004" +
    "\042\122\001\001\000\002\001\001\000\004\043\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\127" +
    "\007\057\001\001\000\002\001\001\000\004\030\131\001" +
    "\001\000\022\003\132\004\021\010\016\011\003\013\010" +
    "\014\006\015\011\017\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$RubyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$RubyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$RubyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	

    /**Método que é chamado automaticamente antes de um erro de sintaxe.*/
    public void syntax_error(Symbol s){
        System.out.println("Erro na linha " + (s.right+1) +", Coluna "+s.left+ ". ID "
        +s.value + " não reconhecido." );
    }

    /**Método que é chamado quando não é possível a recuperação de erros.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Falha na compilação.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$RubyParser$actions {



  int inc = 0;

  public String quebraDeLinha(){
  
  	return "\n";
  
  }

  private final RubyParser parser;

  /** Constructor */
  CUP$RubyParser$actions(RubyParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$RubyParser$do_action(
    int                        CUP$RubyParser$act_num,
    java_cup.runtime.lr_parser CUP$RubyParser$parser,
    java.util.Stack            CUP$RubyParser$stack,
    int                        CUP$RubyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$RubyParser$result;

      /* select the action based on the action number */
      switch (CUP$RubyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variavel ::= STRING 
            {
              Object RESULT =null;
		 System.out.println("STRING"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("variavel",6, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variavel ::= IDENTIFICADOR NT$23 ATRIBUICAO NT$24 NUMERO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
		 System.out.println("NUMERO"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("variavel",6, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$24 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
 System.out.print(" = "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$24",37, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$23 ::= 
            {
              Object RESULT =null;
 System.out.print("IDENTIFICADOR"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$23",36, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arg ::= NUMERO 
            {
              Object RESULT =null;
		 System.out.print("NUMERO"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("arg",5, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arg ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		 System.out.print(" IDENTIFICADOR"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("arg",5, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // identificadores_funcao ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		 System.out.print(" IDENTIFICADOR"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("identificadores_funcao",12, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // identificadores_funcao ::= IDENTIFICADOR NT$21 VIRGULA NT$22 identificadores_funcao 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("identificadores_funcao",12, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$22 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
 System.out.print(", "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$22",35, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$21 ::= 
            {
              Object RESULT =null;
 System.out.print("IDENTIFICADOR"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$21",34, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr_for ::= IDENTIFICADOR NT$17 IN NT$18 NUMERO NT$19 DOIS_PONTOS2 NT$20 NUMERO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
		 System.out.print("NUMERO"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("expr_for",8, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-8)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
 System.out.print(" .. "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$20",33, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
 System.out.print(" NUMERO"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$19",32, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
 System.out.print(" IN "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$18",31, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$17 ::= 
            {
              Object RESULT =null;
 System.out.print(" IDENTIFICADOR "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$17",30, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= arg MENOR NT$16 arg 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-3)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$16 ::= 
            {
              Object RESULT =null;
 System.out.print(" < "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$16",29, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= arg MAIOR NT$15 arg 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-3)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$15 ::= 
            {
              Object RESULT =null;
 System.out.print(" > "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$15",28, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // classe ::= CLASS NT$13 IDENTIFICADOR NT$14 codigo END_MINUSCULO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).value;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("classe",10, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-5)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
 System.out.print("\n |-- "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$14",27, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$13 ::= 
            {
              Object RESULT =null;
 System.out.print("CLASS "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$13",26, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funcao ::= DEF NT$10 IDENTIFICADOR PARENTESE_ABERTURA NT$11 identificadores_funcao PARENTESE_FECHAMENTO NT$12 codigo END_MINUSCULO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).value;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("funcao",11, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-9)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).value;
 System.out.print(")");  System.out.print("\n |-- "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$12",25, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).value;
 System.out.print("("); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$11",24, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$10 ::= 
            {
              Object RESULT =null;
 System.out.print("DEF"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$10",23, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // repeticao_while ::= WHILE NT$8 expr DO NT$9 codigo END_MINUSCULO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).value;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("repeticao_while",9, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-6)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).value;
 System.out.print("\n |-- "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$9",22, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$8 ::= 
            {
              Object RESULT =null;
 System.out.print("WHILE"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$8",21, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // repeticao_for ::= FOR NT$6 expr_for NT$7 codigo END_MINUSCULO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).value;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("repeticao_for",7, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-5)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
 System.out.print("\n |--"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$7",20, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$6 ::= 
            {
              Object RESULT =null;
 System.out.print("FOR"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$6",19, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cod_condicao ::= 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("cod_condicao",3, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cod_condicao ::= NT$4 ELSE NT$5 codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("cod_condicao",3, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-3)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
 System.out.print("\n |-- "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$5",18, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$4 ::= 
            {
              Object RESULT =null;
 System.out.print("ELSE"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$4",17, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cod_condicao ::= NT$2 ELSIF expr NT$3 codigo cod_condicao 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).value;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("cod_condicao",3, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-5)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).value;
 System.out.print("\n |-- "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$3",16, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              Object RESULT =null;
 System.out.print("ELSIF"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$2",15, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // condicao ::= NT$0 IF expr NT$1 codigo cod_condicao END_MINUSCULO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-3)).value;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("condicao",2, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-6)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).value;
 System.out.print("\n |-- "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$1",14, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.print("IF"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$0",13, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= variavel codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigo ::= classe codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigo ::= funcao codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigo ::= repeticao_while codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= repeticao_for codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= condicao codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
		RESULT = start_val;
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$RubyParser$parser.done_parsing();
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

