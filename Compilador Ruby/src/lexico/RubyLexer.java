/* The following code was generated by JFlex 1.6.1 */

package lexico;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/paulo/git/compilador-ruby/Compilador Ruby/src/lexico/scanner.jflex</tt>
 */
public class RubyLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\106\1\3\1\1\22\0\1\3\1\76\1\0"+
    "\1\4\1\0\1\66\1\71\1\0\1\55\1\56\1\64\1\63\1\100"+
    "\1\21\1\17\1\65\1\7\1\15\2\14\4\14\2\10\1\101\1\103"+
    "\1\67\1\75\1\70\1\105\1\77\1\13\1\22\1\13\1\41\1\23"+
    "\1\16\1\24\1\5\1\25\1\104\1\5\1\11\1\5\1\26\11\5"+
    "\1\12\2\5\1\61\1\0\1\62\1\73\1\6\1\102\1\33\1\50"+
    "\1\47\1\45\1\20\1\36\1\54\1\40\1\44\1\104\1\51\1\35"+
    "\1\52\1\27\1\42\1\43\1\5\1\32\1\30\1\34\1\31\1\5"+
    "\1\37\1\53\1\46\1\5\1\57\1\72\1\60\1\74\6\0\1\106"+
    "\u1fa2\0\1\106\1\106\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\1\3\1\4\2\5\1\6\1\4"+
    "\1\7\22\4\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\1\1\31\1\32\1\33\1\34"+
    "\1\35\2\3\1\36\3\5\1\0\4\5\1\0\1\37"+
    "\2\4\1\40\20\4\1\41\1\4\1\42\1\43\1\4"+
    "\1\44\6\4\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\4\5\1\0\1\4\1\65\2\4\1\66"+
    "\1\4\1\67\10\4\1\70\5\4\1\71\3\4\1\72"+
    "\6\4\1\73\1\74\1\75\1\76\2\5\1\4\1\77"+
    "\2\4\1\100\1\101\7\4\1\102\2\4\1\103\1\104"+
    "\1\4\1\105\1\4\1\106\2\4\1\107\4\4\2\5"+
    "\1\4\1\110\1\111\1\112\1\113\1\4\1\114\2\4"+
    "\1\115\1\4\1\116\1\117\1\120\1\4\1\121\1\122"+
    "\1\123\1\124\1\4\2\5\1\125\1\126\1\127\1\130"+
    "\1\131\1\4\1\132\2\5\1\133\6\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\5\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\107\0\325\0\u011c\0\u0163\0\u01aa"+
    "\0\u01f1\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2"+
    "\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a"+
    "\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\107\0\107"+
    "\0\107\0\107\0\107\0\107\0\u080b\0\u0852\0\u0899\0\u08e0"+
    "\0\u0927\0\u096e\0\u09b5\0\u09fc\0\u0a43\0\107\0\u0a8a\0\u0ad1"+
    "\0\107\0\107\0\107\0\107\0\107\0\u0b18\0\107\0\107"+
    "\0\u0b5f\0\u0ba6\0\107\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09"+
    "\0\u0d50\0\107\0\u0d97\0\u0dde\0\107\0\u0e25\0\u0e6c\0\u0eb3"+
    "\0\u0efa\0\u0f41\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb"+
    "\0\u1132\0\u1179\0\u11c0\0\u1207\0\u124e\0\u0163\0\u1295\0\u0163"+
    "\0\u0163\0\u12dc\0\u0163\0\u1323\0\u136a\0\u13b1\0\u13f8\0\u143f"+
    "\0\u1486\0\107\0\u14cd\0\107\0\u1514\0\107\0\107\0\u155b"+
    "\0\107\0\107\0\u15a2\0\107\0\107\0\107\0\107\0\107"+
    "\0\107\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c\0\u0163"+
    "\0\u1793\0\u17da\0\u0163\0\u1821\0\u0163\0\u1868\0\u18af\0\u18f6"+
    "\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u0163\0\u1aa0\0\u1ae7"+
    "\0\u1b2e\0\u1b75\0\u1bbc\0\u0163\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8"+
    "\0\u1d1f\0\u1d66\0\u1dad\0\u1df4\0\u1e3b\0\u1e82\0\107\0\107"+
    "\0\107\0\107\0\u1ec9\0\u1f10\0\u1f57\0\u0163\0\u1f9e\0\u1fe5"+
    "\0\u0163\0\u0163\0\u202c\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f"+
    "\0\u21d6\0\u0163\0\u221d\0\u2264\0\u0163\0\u0163\0\u22ab\0\u0163"+
    "\0\u22f2\0\u0163\0\u2339\0\u2380\0\u0163\0\u23c7\0\u240e\0\u2455"+
    "\0\u249c\0\u24e3\0\u252a\0\u2571\0\u0163\0\u0163\0\u0163\0\u0163"+
    "\0\u25b8\0\u0163\0\u25ff\0\u2646\0\u0163\0\u268d\0\u0163\0\u0163"+
    "\0\u0163\0\u26d4\0\u0163\0\u0163\0\u0163\0\u0163\0\u271b\0\u2762"+
    "\0\u27a9\0\u0163\0\u0163\0\u0163\0\u0163\0\u0163\0\u27f0\0\u0163"+
    "\0\u2837\0\u287e\0\u0163\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1"+
    "\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19"+
    "\0\u2c60\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51"+
    "\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\3\7\2\11\1\7\1\12\1\13\1\14\1\15"+
    "\1\16\3\7\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\7\1\25\1\26\2\7\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\7\1\36\2\7\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\7\1\2\112\0"+
    "\1\4\107\0\1\5\103\0\1\6\1\66\1\67\104\6"+
    "\5\0\12\7\1\0\1\7\1\0\33\7\27\0\1\7"+
    "\1\70\10\0\1\71\1\72\1\73\1\74\1\0\1\75"+
    "\1\76\1\77\1\100\1\101\2\0\1\101\11\0\1\73"+
    "\1\77\14\0\1\74\42\0\2\11\1\73\2\0\2\11"+
    "\1\77\1\100\1\101\2\0\1\101\11\0\1\73\1\77"+
    "\57\0\2\100\3\0\2\100\1\0\1\102\74\0\12\7"+
    "\1\0\1\7\1\0\5\7\1\103\5\7\1\104\17\7"+
    "\27\0\1\7\1\70\76\0\1\105\16\0\12\7\1\0"+
    "\1\7\1\0\1\7\1\106\31\7\27\0\1\7\1\70"+
    "\6\0\12\7\1\0\1\7\1\0\4\7\1\107\26\7"+
    "\27\0\1\7\1\70\6\0\12\7\1\0\1\110\1\0"+
    "\20\7\1\111\12\7\27\0\1\7\1\70\6\0\12\7"+
    "\1\0\1\112\1\0\7\7\1\113\23\7\27\0\1\7"+
    "\1\70\6\0\12\7\1\0\1\7\1\0\5\7\1\114"+
    "\25\7\27\0\1\7\1\70\6\0\12\7\1\0\1\115"+
    "\1\0\33\7\27\0\1\7\1\70\6\0\12\7\1\0"+
    "\1\7\1\0\5\7\1\116\1\117\4\7\1\120\17\7"+
    "\27\0\1\7\1\70\6\0\12\7\1\0\1\7\1\0"+
    "\10\7\1\121\5\7\1\122\14\7\27\0\1\7\1\70"+
    "\6\0\12\7\1\0\1\7\1\0\11\7\1\123\6\7"+
    "\1\124\12\7\27\0\1\7\1\70\6\0\12\7\1\0"+
    "\1\7\1\0\16\7\1\125\14\7\27\0\1\7\1\70"+
    "\6\0\12\7\1\0\1\7\1\0\10\7\1\126\22\7"+
    "\27\0\1\7\1\70\6\0\12\7\1\0\1\7\1\0"+
    "\7\7\1\127\23\7\27\0\1\7\1\70\6\0\12\7"+
    "\1\0\1\7\1\0\5\7\1\130\6\7\1\131\16\7"+
    "\27\0\1\7\1\70\6\0\12\7\1\0\1\132\1\0"+
    "\20\7\1\133\12\7\27\0\1\7\1\70\6\0\12\7"+
    "\1\0\1\7\1\0\22\7\1\134\10\7\27\0\1\7"+
    "\1\70\6\0\12\7\1\0\1\7\1\0\11\7\1\135"+
    "\1\7\1\136\17\7\27\0\1\7\1\70\6\0\12\7"+
    "\1\0\1\137\1\0\10\7\1\140\22\7\27\0\1\7"+
    "\1\70\6\0\12\7\1\0\1\7\1\0\20\7\1\141"+
    "\12\7\27\0\1\7\1\70\76\0\1\142\75\0\1\143"+
    "\10\0\1\144\76\0\1\145\7\0\1\146\106\0\1\147"+
    "\100\0\1\150\1\151\4\0\1\152\101\0\1\153\4\0"+
    "\1\154\106\0\1\155\106\0\1\156\106\0\1\157\106\0"+
    "\1\160\106\0\1\161\13\0\1\67\113\0\1\71\1\72"+
    "\1\73\2\0\1\75\1\76\1\77\1\100\1\101\2\0"+
    "\1\101\11\0\1\73\1\77\57\0\2\72\3\0\2\72"+
    "\1\77\1\100\1\101\2\0\1\101\12\0\1\77\57\0"+
    "\1\162\1\163\2\0\4\163\1\0\1\163\1\0\2\163"+
    "\7\0\1\163\2\0\1\163\2\0\1\163\3\0\1\163"+
    "\1\0\2\163\45\0\1\164\1\72\1\73\2\0\2\164"+
    "\1\77\1\100\1\101\2\0\1\101\11\0\1\73\1\77"+
    "\57\0\1\75\1\72\1\73\2\0\2\75\1\77\1\100"+
    "\1\101\2\0\1\101\11\0\1\73\1\77\154\0\1\73"+
    "\11\0\2\100\3\0\2\100\1\77\1\0\1\101\2\0"+
    "\1\101\12\0\1\77\57\0\2\165\3\0\2\165\3\0"+
    "\1\166\41\0\1\166\30\0\12\7\1\0\1\7\1\0"+
    "\6\7\1\167\14\7\1\170\7\7\27\0\1\7\1\70"+
    "\6\0\12\7\1\0\1\7\1\0\6\7\1\171\24\7"+
    "\27\0\1\7\1\70\6\0\12\7\1\0\1\7\1\0"+
    "\2\7\1\172\30\7\27\0\1\7\1\70\6\0\12\7"+
    "\1\0\1\7\1\0\17\7\1\173\13\7\27\0\1\7"+
    "\1\70\6\0\12\7\1\0\1\7\1\0\31\7\1\174"+
    "\1\7\27\0\1\7\1\70\6\0\12\7\1\0\1\7"+
    "\1\0\12\7\1\175\20\7\27\0\1\7\1\70\6\0"+
    "\12\7\1\0\1\7\1\0\13\7\1\176\17\7\27\0"+
    "\1\7\1\70\6\0\12\7\1\0\1\7\1\0\21\7"+
    "\1\177\11\7\27\0\1\7\1\70\6\0\12\7\1\0"+
    "\1\7\1\0\12\7\1\200\1\201\7\7\1\202\7\7"+
    "\27\0\1\7\1\70\6\0\12\7\1\0\1\7\1\0"+
    "\6\7\1\203\3\7\1\204\10\7\1\205\7\7\27\0"+
    "\1\7\1\70\6\0\12\7\1\0\1\7\1\0\23\7"+
    "\1\206\7\7\27\0\1\7\1\70\6\0\12\7\1\0"+
    "\1\7\1\0\6\7\1\207\24\7\27\0\1\7\1\70"+
    "\6\0\12\7\1\0\1\7\1\0\22\7\1\210\10\7"+
    "\27\0\1\7\1\70\6\0\12\7\1\0\1\7\1\0"+
    "\7\7\1\211\23\7\27\0\1\7\1\70\6\0\12\7"+
    "\1\0\1\212\1\0\33\7\27\0\1\7\1\70\6\0"+
    "\12\7\1\0\1\7\1\0\13\7\1\213\17\7\27\0"+
    "\1\7\1\70\6\0\12\7\1\0\1\7\1\0\10\7"+
    "\1\214\22\7\27\0\1\7\1\70\6\0\12\7\1\0"+
    "\1\215\1\0\22\7\1\216\10\7\27\0\1\7\1\70"+
    "\6\0\12\7\1\0\1\7\1\0\12\7\1\217\20\7"+
    "\27\0\1\7\1\70\6\0\12\7\1\0\1\7\1\0"+
    "\14\7\1\220\16\7\27\0\1\7\1\70\6\0\12\7"+
    "\1\0\1\221\1\0\33\7\27\0\1\7\1\70\6\0"+
    "\12\7\1\0\1\7\1\0\6\7\1\222\24\7\27\0"+
    "\1\7\1\70\6\0\12\7\1\0\1\7\1\0\11\7"+
    "\1\223\21\7\27\0\1\7\1\70\6\0\12\7\1\0"+
    "\1\7\1\0\32\7\1\224\27\0\1\7\1\70\6\0"+
    "\12\7\1\0\1\225\1\0\33\7\27\0\1\7\1\70"+
    "\6\0\12\7\1\0\1\7\1\0\23\7\1\226\7\7"+
    "\27\0\1\7\1\70\76\0\1\227\106\0\1\230\106\0"+
    "\1\231\106\0\1\232\20\0\1\162\1\163\1\73\1\0"+
    "\4\163\1\0\1\163\1\0\2\163\7\0\1\163\1\0"+
    "\1\73\1\163\2\0\1\163\3\0\1\163\1\0\2\163"+
    "\45\0\2\233\1\73\1\0\4\233\1\0\1\233\1\0"+
    "\2\233\7\0\1\233\1\0\1\73\1\233\2\0\1\233"+
    "\3\0\1\233\1\0\2\233\45\0\1\234\1\72\1\73"+
    "\2\0\2\234\1\77\1\100\1\101\2\0\1\101\11\0"+
    "\1\73\1\77\57\0\2\165\3\0\2\165\1\77\17\0"+
    "\1\77\57\0\2\165\3\0\2\165\76\0\12\7\1\0"+
    "\1\7\1\0\7\7\1\235\23\7\27\0\1\7\1\70"+
    "\6\0\12\7\1\0\1\236\1\0\22\7\1\237\10\7"+
    "\27\0\1\7\1\70\6\0\12\7\1\0\1\7\1\0"+
    "\3\7\1\240\27\7\27\0\1\7\1\70\6\0\12\7"+
    "\1\0\1\7\1\0\12\7\1\241\20\7\27\0\1\7"+
    "\1\70\6\0\12\7\1\0\1\7\1\0\14\7\1\242"+
    "\16\7\27\0\1\7\1\70\6\0\12\7\1\0\1\243"+
    "\1\0\33\7\27\0\1\7\1\70\6\0\12\7\1\0"+
    "\1\7\1\0\22\7\1\244\10\7\27\0\1\7\1\70"+
    "\6\0\12\7\1\0\1\245\1\0\33\7\27\0\1\7"+
    "\1\70\6\0\12\7\1\0\1\246\1\0\33\7\27\0"+
    "\1\7\1\70\6\0\12\7\1\0\1\7\1\0\25\7"+
    "\1\247\5\7\27\0\1\7\1\70\6\0\12\7\1\0"+
    "\1\7\1\0\7\7\1\250\1\251\22\7\27\0\1\7"+
    "\1\70\6\0\12\7\1\0\1\7\1\0\20\7\1\252"+
    "\12\7\27\0\1\7\1\70\6\0\12\7\1\0\1\253"+
    "\1\0\33\7\27\0\1\7\1\70\6\0\12\7\1\0"+
    "\1\7\1\0\11\7\1\254\21\7\27\0\1\7\1\70"+
    "\6\0\12\7\1\0\1\255\1\0\33\7\27\0\1\7"+
    "\1\70\6\0\12\7\1\0\1\7\1\0\5\7\1\256"+
    "\25\7\27\0\1\7\1\70\6\0\12\7\1\0\1\7"+
    "\1\0\6\7\1\257\24\7\27\0\1\7\1\70\6\0"+
    "\12\7\1\0\1\7\1\0\5\7\1\260\25\7\27\0"+
    "\1\7\1\70\6\0\12\7\1\0\1\7\1\0\13\7"+
    "\1\261\17\7\27\0\1\7\1\70\6\0\12\7\1\0"+
    "\1\7\1\0\6\7\1\262\24\7\27\0\1\7\1\70"+
    "\6\0\12\7\1\0\1\7\1\0\22\7\1\263\10\7"+
    "\27\0\1\7\1\70\6\0\12\7\1\0\1\7\1\0"+
    "\13\7\1\264\17\7\27\0\1\7\1\70\6\0\12\7"+
    "\1\0\1\265\1\0\33\7\27\0\1\7\1\70\6\0"+
    "\12\7\1\0\1\7\1\0\6\7\1\266\24\7\27\0"+
    "\1\7\1\70\6\0\12\7\1\0\1\7\1\0\22\7"+
    "\1\267\10\7\27\0\1\7\1\70\6\0\12\7\1\0"+
    "\1\7\1\0\11\7\1\270\21\7\27\0\1\7\1\70"+
    "\6\0\12\7\1\0\1\7\1\0\7\7\1\271\23\7"+
    "\27\0\1\7\1\70\10\0\2\272\1\73\1\0\4\272"+
    "\1\0\1\272\1\0\2\272\7\0\1\272\1\0\1\73"+
    "\1\272\2\0\1\272\3\0\1\272\1\0\2\272\45\0"+
    "\1\273\1\72\1\73\2\0\2\273\1\77\1\100\1\101"+
    "\2\0\1\101\11\0\1\73\1\77\55\0\12\7\1\0"+
    "\1\7\1\0\10\7\1\274\22\7\27\0\1\7\1\70"+
    "\6\0\12\7\1\0\1\7\1\0\14\7\1\275\16\7"+
    "\27\0\1\7\1\70\6\0\12\7\1\0\1\7\1\0"+
    "\4\7\1\276\26\7\27\0\1\7\1\70\6\0\12\7"+
    "\1\0\1\7\1\0\10\7\1\277\22\7\27\0\1\7"+
    "\1\70\6\0\12\7\1\0\1\7\1\0\13\7\1\300"+
    "\17\7\27\0\1\7\1\70\6\0\12\7\1\0\1\7"+
    "\1\0\6\7\1\301\24\7\27\0\1\7\1\70\6\0"+
    "\12\7\1\0\1\7\1\0\14\7\1\302\16\7\27\0"+
    "\1\7\1\70\6\0\12\7\1\0\1\7\1\0\7\7"+
    "\1\303\23\7\27\0\1\7\1\70\6\0\12\7\1\0"+
    "\1\7\1\0\10\7\1\304\22\7\27\0\1\7\1\70"+
    "\6\0\12\7\1\0\1\7\1\0\24\7\1\305\6\7"+
    "\27\0\1\7\1\70\6\0\12\7\1\0\1\7\1\0"+
    "\10\7\1\306\22\7\27\0\1\7\1\70\6\0\12\7"+
    "\1\0\1\7\1\0\6\7\1\307\24\7\27\0\1\7"+
    "\1\70\6\0\12\7\1\0\1\310\1\0\33\7\27\0"+
    "\1\7\1\70\6\0\12\7\1\0\1\311\1\0\33\7"+
    "\27\0\1\7\1\70\6\0\12\7\1\0\1\7\1\0"+
    "\5\7\1\312\25\7\27\0\1\7\1\70\6\0\12\7"+
    "\1\0\1\7\1\0\23\7\1\313\7\7\27\0\1\7"+
    "\1\70\6\0\12\7\1\0\1\7\1\0\6\7\1\314"+
    "\24\7\27\0\1\7\1\70\6\0\12\7\1\0\1\7"+
    "\1\0\5\7\1\315\25\7\27\0\1\7\1\70\6\0"+
    "\12\7\1\0\1\7\1\0\27\7\1\316\3\7\27\0"+
    "\1\7\1\70\6\0\12\7\1\0\1\7\1\0\13\7"+
    "\1\317\17\7\27\0\1\7\1\70\10\0\2\320\1\73"+
    "\1\0\4\320\1\0\1\320\1\0\2\320\7\0\1\320"+
    "\1\0\1\73\1\320\2\0\1\320\3\0\1\320\1\0"+
    "\2\320\45\0\1\321\1\72\1\73\2\0\2\321\1\77"+
    "\1\100\1\101\2\0\1\101\11\0\1\73\1\77\55\0"+
    "\12\7\1\0\1\322\1\0\33\7\27\0\1\7\1\70"+
    "\6\0\12\7\1\0\1\7\1\0\6\7\1\323\24\7"+
    "\27\0\1\7\1\70\6\0\12\7\1\0\1\324\1\0"+
    "\33\7\27\0\1\7\1\70\6\0\12\7\1\0\1\7"+
    "\1\0\5\7\1\325\25\7\27\0\1\7\1\70\6\0"+
    "\12\7\1\0\1\7\1\0\12\7\1\326\20\7\27\0"+
    "\1\7\1\70\6\0\12\7\1\0\1\327\1\0\33\7"+
    "\27\0\1\7\1\70\6\0\12\7\1\0\1\330\1\0"+
    "\33\7\27\0\1\7\1\70\10\0\2\331\1\73\1\0"+
    "\4\331\1\0\1\331\1\0\2\331\7\0\1\331\1\0"+
    "\1\73\1\331\2\0\1\331\3\0\1\331\1\0\2\331"+
    "\45\0\1\332\1\72\1\73\2\0\2\332\1\77\1\100"+
    "\1\101\2\0\1\101\11\0\1\73\1\77\55\0\12\7"+
    "\1\0\1\7\1\0\23\7\1\333\7\7\27\0\1\7"+
    "\1\70\10\0\2\334\1\73\1\0\4\334\1\0\1\334"+
    "\1\0\2\334\7\0\1\334\1\0\1\73\1\334\2\0"+
    "\1\334\3\0\1\334\1\0\2\334\45\0\1\335\1\72"+
    "\1\73\2\0\2\335\1\77\1\100\1\101\2\0\1\101"+
    "\11\0\1\73\1\77\57\0\2\336\1\73\1\0\4\336"+
    "\1\0\1\336\1\0\2\336\7\0\1\336\1\0\1\73"+
    "\1\336\2\0\1\336\3\0\1\336\1\0\2\336\45\0"+
    "\1\337\1\72\1\73\2\0\2\337\1\77\1\100\1\101"+
    "\2\0\1\101\11\0\1\73\1\77\57\0\2\340\1\73"+
    "\1\0\4\340\1\0\1\340\1\0\2\340\7\0\1\340"+
    "\1\0\1\73\1\340\2\0\1\340\3\0\1\340\1\0"+
    "\2\340\45\0\1\341\1\72\1\73\2\0\2\341\1\77"+
    "\1\100\1\101\2\0\1\101\11\0\1\73\1\77\57\0"+
    "\2\342\1\73\1\0\4\342\1\0\1\342\1\0\2\342"+
    "\7\0\1\342\1\0\1\73\1\342\2\0\1\342\3\0"+
    "\1\342\1\0\2\342\45\0\1\343\1\72\1\73\2\0"+
    "\2\343\1\77\1\100\1\101\2\0\1\101\11\0\1\73"+
    "\1\77\57\0\2\344\1\73\1\0\4\344\1\0\1\344"+
    "\1\0\2\344\7\0\1\344\1\0\1\73\1\344\2\0"+
    "\1\344\3\0\1\344\1\0\2\344\45\0\1\345\1\72"+
    "\1\73\2\0\2\345\1\77\1\100\1\101\2\0\1\101"+
    "\11\0\1\73\1\77\57\0\2\346\1\73\1\0\4\346"+
    "\1\0\1\346\1\0\2\346\7\0\1\346\1\0\1\73"+
    "\1\346\2\0\1\346\3\0\1\346\1\0\2\346\45\0"+
    "\1\347\1\72\1\73\2\0\2\347\1\77\1\100\1\101"+
    "\2\0\1\101\11\0\1\73\1\77\57\0\2\350\1\73"+
    "\1\0\4\350\1\0\1\350\1\0\2\350\7\0\1\350"+
    "\1\0\1\73\1\350\2\0\1\350\3\0\1\350\1\0"+
    "\2\350\45\0\1\351\1\72\1\73\2\0\2\351\1\77"+
    "\1\100\1\101\2\0\1\101\11\0\1\73\1\77\57\0"+
    "\2\352\1\73\1\0\4\352\1\0\1\352\1\0\2\352"+
    "\7\0\1\352\1\0\1\73\1\352\2\0\1\352\3\0"+
    "\1\352\1\0\2\352\45\0\1\353\1\72\1\73\2\0"+
    "\2\353\1\77\1\100\1\101\2\0\1\101\11\0\1\73"+
    "\1\77\57\0\2\354\1\73\1\0\4\354\1\0\1\354"+
    "\1\0\2\354\7\0\1\354\1\0\1\73\1\354\2\0"+
    "\1\354\3\0\1\354\1\0\2\354\45\0\1\355\1\72"+
    "\1\73\2\0\2\355\1\77\1\100\1\101\2\0\1\101"+
    "\11\0\1\73\1\77\57\0\2\356\1\73\1\0\4\356"+
    "\1\0\1\356\1\0\2\356\7\0\1\356\1\0\1\73"+
    "\1\356\2\0\1\356\3\0\1\356\1\0\2\356\45\0"+
    "\1\357\1\72\1\73\2\0\2\357\1\77\1\100\1\101"+
    "\2\0\1\101\11\0\1\73\1\77\57\0\2\360\1\73"+
    "\1\0\4\360\1\0\1\360\1\0\2\360\7\0\1\360"+
    "\1\0\1\73\1\360\2\0\1\360\3\0\1\360\1\0"+
    "\2\360\45\0\1\361\1\72\1\73\2\0\2\361\1\77"+
    "\1\100\1\101\2\0\1\101\11\0\1\73\1\77\61\0"+
    "\1\73\23\0\1\73\60\0\1\362\1\72\1\73\2\0"+
    "\2\362\1\77\1\100\1\101\2\0\1\101\11\0\1\73"+
    "\1\77\57\0\1\363\1\72\1\73\2\0\2\363\1\77"+
    "\1\100\1\101\2\0\1\101\11\0\1\73\1\77\57\0"+
    "\1\364\1\72\1\73\2\0\2\364\1\77\1\100\1\101"+
    "\2\0\1\101\11\0\1\73\1\77\57\0\1\365\1\72"+
    "\1\73\2\0\2\365\1\77\1\100\1\101\2\0\1\101"+
    "\11\0\1\73\1\77\57\0\2\72\1\73\2\0\2\72"+
    "\1\77\1\100\1\101\2\0\1\101\11\0\1\73\1\77"+
    "\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12283];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\32\1\6\11\11\1\1\11"+
    "\2\1\5\11\1\1\2\11\2\1\1\11\1\0\4\1"+
    "\1\0\1\11\2\1\1\11\34\1\1\11\1\1\1\11"+
    "\1\1\2\11\1\1\2\11\1\1\6\11\4\1\1\0"+
    "\40\1\4\11\107\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RubyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 220) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return null;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caractere ilegal: " + yytext());
            }
          case 92: break;
          case 2: 
            { 
            }
          case 93: break;
          case 3: 
            { return new Symbol(Token.COMENTARIO, yychar, yyline);
            }
          case 94: break;
          case 4: 
            { return new Symbol(Token.IDENTIFICADOR, yychar, yyline);
            }
          case 95: break;
          case 5: 
            { return new Symbol(Token.NUMERO, yychar, yyline);
            }
          case 96: break;
          case 6: 
            { return new Symbol(Token.PONTO, yychar, yyline);
            }
          case 97: break;
          case 7: 
            { return new Symbol(Token.MENOS, yychar, yyline);
            }
          case 98: break;
          case 8: 
            { return new Symbol(Token.PARENTESE_ABERTURA, yychar, yyline);
            }
          case 99: break;
          case 9: 
            { return new Symbol(Token.PARENTESE_FECHAMENTO, yychar, yyline);
            }
          case 100: break;
          case 10: 
            { return new Symbol(Token.CHAVE_ABERTURA, yychar, yyline);
            }
          case 101: break;
          case 11: 
            { return new Symbol(Token.CHAVE_FECHAMENTO, yychar, yyline);
            }
          case 102: break;
          case 12: 
            { return new Symbol(Token.COLCHETE_ABERTURA, yychar, yyline);
            }
          case 103: break;
          case 13: 
            { return new Symbol(Token.COLCHETE_FECHAMENTO, yychar, yyline);
            }
          case 104: break;
          case 14: 
            { return new Symbol(Token.MAIS, yychar, yyline);
            }
          case 105: break;
          case 15: 
            { return new Symbol(Token.VEZES, yychar, yyline);
            }
          case 106: break;
          case 16: 
            { return new Symbol(Token.BARRA, yychar, yyline);
            }
          case 107: break;
          case 17: 
            { return new Symbol(Token.PORCENTAGEM, yychar, yyline);
            }
          case 108: break;
          case 18: 
            { return new Symbol(Token.MENOR, yychar, yyline);
            }
          case 109: break;
          case 19: 
            { return new Symbol(Token.MAIOR, yychar, yyline);
            }
          case 110: break;
          case 20: 
            { return new Symbol(Token.E_COMERCIAL, yychar, yyline);
            }
          case 111: break;
          case 21: 
            { return new Symbol(Token.BARRA_VERTICAL, yychar, yyline);
            }
          case 112: break;
          case 22: 
            { return new Symbol(Token.POTENCIACAO, yychar, yyline);
            }
          case 113: break;
          case 23: 
            { return new Symbol(Token.TIL, yychar, yyline);
            }
          case 114: break;
          case 24: 
            { return new Symbol(Token.ATRIBUICAO, yychar, yyline);
            }
          case 115: break;
          case 25: 
            { return new Symbol(Token.ARROBA, yychar, yyline);
            }
          case 116: break;
          case 26: 
            { return new Symbol(Token.VIRGULA, yychar, yyline);
            }
          case 117: break;
          case 27: 
            { return new Symbol(Token.DOIS_PONTOS, yychar, yyline);
            }
          case 118: break;
          case 28: 
            { return new Symbol(Token.APOSTROFO, yychar, yyline);
            }
          case 119: break;
          case 29: 
            { return new Symbol(Token.PONTO_E_VIRGULA, yychar, yyline);
            }
          case 120: break;
          case 30: 
            { return new Symbol(Token.TIPO2, yychar, yyline);
            }
          case 121: break;
          case 31: 
            { return new Symbol(Token.DOIS_PONTOS2, yychar, yyline);
            }
          case 122: break;
          case 32: 
            { return new Symbol(Token.DECREMENTO, yychar, yyline);
            }
          case 123: break;
          case 33: 
            { return new Symbol(Token.OR, yychar, yyline);
            }
          case 124: break;
          case 34: 
            { return new Symbol(Token.IN, yychar, yyline);
            }
          case 125: break;
          case 35: 
            { return new Symbol(Token.IF, yychar, yyline);
            }
          case 126: break;
          case 36: 
            { return new Symbol(Token.DO, yychar, yyline);
            }
          case 127: break;
          case 37: 
            { return new Symbol(Token.INCREMENTO, yychar, yyline);
            }
          case 128: break;
          case 38: 
            { return new Symbol(Token.VEZES_VEZES, yychar, yyline);
            }
          case 129: break;
          case 39: 
            { return new Symbol(Token.INCREMENTO_MULTIP, yychar, yyline);
            }
          case 130: break;
          case 40: 
            { return new Symbol(Token.BARRA_BARRA, yychar, yyline);
            }
          case 131: break;
          case 41: 
            { return new Symbol(Token.INCREMENTO_DIVISAO, yychar, yyline);
            }
          case 132: break;
          case 42: 
            { return new Symbol(Token.PORCENTAGEM_IGUAL, yychar, yyline);
            }
          case 133: break;
          case 43: 
            { return new Symbol(Token.MENOR_MENOR, yychar, yyline);
            }
          case 134: break;
          case 44: 
            { return new Symbol(Token.DIFERENTE2, yychar, yyline);
            }
          case 135: break;
          case 45: 
            { return new Symbol(Token.MENOR_OU_IGUAL, yychar, yyline);
            }
          case 136: break;
          case 46: 
            { return new Symbol(Token.MAIOR_MAIOR, yychar, yyline);
            }
          case 137: break;
          case 47: 
            { return new Symbol(Token.MAIOR_OU_IGUAL, yychar, yyline);
            }
          case 138: break;
          case 48: 
            { return new Symbol(Token.E_COMERCIAL_IGUAL, yychar, yyline);
            }
          case 139: break;
          case 49: 
            { return new Symbol(Token.BARRA_VERTICAL_IGUAL, yychar, yyline);
            }
          case 140: break;
          case 50: 
            { return new Symbol(Token.PONTENCIACAO_IGUAL, yychar, yyline);
            }
          case 141: break;
          case 51: 
            { return new Symbol(Token.IGUAL_IGUAL, yychar, yyline);
            }
          case 142: break;
          case 52: 
            { return new Symbol(Token.DIFERENTE1, yychar, yyline);
            }
          case 143: break;
          case 53: 
            { return new Symbol(Token.END_MINUSCULO, yychar, yyline);
            }
          case 144: break;
          case 54: 
            { return new Symbol(Token.END_MAIUSCULO, yychar, yyline);
            }
          case 145: break;
          case 55: 
            { return new Symbol(Token.NOT, yychar, yyline);
            }
          case 146: break;
          case 56: 
            { return new Symbol(Token.AND, yychar, yyline);
            }
          case 147: break;
          case 57: 
            { return new Symbol(Token.FOR, yychar, yyline);
            }
          case 148: break;
          case 58: 
            { return new Symbol(Token.DEF, yychar, yyline);
            }
          case 149: break;
          case 59: 
            { return new Symbol(Token.MULTIP_MULTIP_IGUAL, yychar, yyline);
            }
          case 150: break;
          case 60: 
            { return new Symbol(Token.INCREMENTO_DIVISAO_DIVISAO, yychar, yyline);
            }
          case 151: break;
          case 61: 
            { return new Symbol(Token.MENOR_MENOR_IGUAL, yychar, yyline);
            }
          case 152: break;
          case 62: 
            { return new Symbol(Token.MAIOR_MAIOR_IGUAL, yychar, yyline);
            }
          case 153: break;
          case 63: 
            { return new Symbol(Token.ELSE, yychar, yyline);
            }
          case 154: break;
          case 64: 
            { return new Symbol(Token.NEXT, yychar, yyline);
            }
          case 155: break;
          case 65: 
            { return new Symbol(Token.SELF, yychar, yyline);
            }
          case 156: break;
          case 66: 
            { return new Symbol(Token.REDO, yychar, yyline);
            }
          case 157: break;
          case 67: 
            { return new Symbol(Token.TRUE, yychar, yyline);
            }
          case 158: break;
          case 68: 
            { return new Symbol(Token.THEN, yychar, yyline);
            }
          case 159: break;
          case 69: 
            { return new Symbol(Token.WHEN, yychar, yyline);
            }
          case 160: break;
          case 70: 
            { return new Symbol(Token.PUTS, yychar, yyline);
            }
          case 161: break;
          case 71: 
            { return new Symbol(Token.CASE, yychar, yyline);
            }
          case 162: break;
          case 72: 
            { return new Symbol(Token.ELSIF, yychar, yyline);
            }
          case 163: break;
          case 73: 
            { return new Symbol(Token.BEGIN_MAIUSCULO, yychar, yyline);
            }
          case 164: break;
          case 74: 
            { return new Symbol(Token.SUPER, yychar, yyline);
            }
          case 165: break;
          case 75: 
            { return new Symbol(Token.UNTIL, yychar, yyline);
            }
          case 166: break;
          case 76: 
            { return new Symbol(Token.UNDEF, yychar, yyline);
            }
          case 167: break;
          case 77: 
            { return new Symbol(Token.RETRY, yychar, yyline);
            }
          case 168: break;
          case 78: 
            { return new Symbol(Token.ALIAS, yychar, yyline);
            }
          case 169: break;
          case 79: 
            { return new Symbol(Token.FALSE, yychar, yyline);
            }
          case 170: break;
          case 80: 
            { return new Symbol(Token.WHILE, yychar, yyline);
            }
          case 171: break;
          case 81: 
            { return new Symbol(Token.YIELD, yychar, yyline);
            }
          case 172: break;
          case 82: 
            { return new Symbol(Token.CLASS, yychar, yyline);
            }
          case 173: break;
          case 83: 
            { return new Symbol(Token.BEGIN_MINUSCULO, yychar, yyline);
            }
          case 174: break;
          case 84: 
            { return new Symbol(Token.BREAK, yychar, yyline);
            }
          case 175: break;
          case 85: 
            { return new Symbol(Token.ENSURE, yychar, yyline);
            }
          case 176: break;
          case 86: 
            { return new Symbol(Token.UNLESS, yychar, yyline);
            }
          case 177: break;
          case 87: 
            { return new Symbol(Token.RESCUE, yychar, yyline);
            }
          case 178: break;
          case 88: 
            { return new Symbol(Token.RETURN, yychar, yyline);
            }
          case 179: break;
          case 89: 
            { return new Symbol(Token.ASSERT, yychar, yyline);
            }
          case 180: break;
          case 90: 
            { return new Symbol(Token.MODULE, yychar, yyline);
            }
          case 181: break;
          case 91: 
            { return new Symbol(Token.DEFINED, yychar, yyline);
            }
          case 182: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
