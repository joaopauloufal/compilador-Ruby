
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 10 09:35:26 GMT-03:00 2015
//----------------------------------------------------

package sintatico;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 10 09:35:26 GMT-03:00 2015
  */
public class RubyParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public RubyParser() {super();}

  /** Constructor which sets the default scanner. */
  public RubyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public RubyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\002\000\002\004\006\000\002\010\006\000" +
    "\002\012\007\000\002\005\005\000\002\005\005\000\002" +
    "\011\007\000\002\006\003\000\002\006\003\000\002\007" +
    "\005\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\051\000\016\002\ufffb\043\006\044\005\047\012\130" +
    "\015\133\011\001\002\000\020\002\ufffb\043\006\044\005" +
    "\047\012\050\ufffb\130\015\133\011\001\002\000\006\127" +
    "\023\130\025\001\002\000\004\130\040\001\002\000\020" +
    "\002\ufffb\043\006\044\005\047\012\050\ufffb\130\015\133" +
    "\011\001\002\000\004\002\035\001\002\000\020\002\ufff1" +
    "\043\ufff1\044\ufff1\047\ufff1\050\ufff1\130\ufff1\133\ufff1\001" +
    "\002\000\006\127\023\130\025\001\002\000\004\002\001" +
    "\001\002\000\020\002\ufffb\043\006\044\005\047\012\050" +
    "\ufffb\130\015\133\011\001\002\000\004\110\020\001\002" +
    "\000\020\002\ufffb\043\006\044\005\047\012\050\ufffb\130" +
    "\015\133\011\001\002\000\006\002\uffff\050\uffff\001\002" +
    "\000\004\127\021\001\002\000\020\002\ufff2\043\ufff2\044" +
    "\ufff2\047\ufff2\050\ufff2\130\ufff2\133\ufff2\001\002\000\006" +
    "\002\ufffc\050\ufffc\001\002\000\024\043\ufff3\044\ufff3\046" +
    "\ufff3\047\ufff3\050\ufff3\073\ufff3\074\ufff3\130\ufff3\133\ufff3" +
    "\001\002\000\006\073\032\074\031\001\002\000\024\043" +
    "\ufff4\044\ufff4\046\ufff4\047\ufff4\050\ufff4\073\ufff4\074\ufff4" +
    "\130\ufff4\133\ufff4\001\002\000\016\043\006\044\005\047" +
    "\012\050\ufffb\130\015\133\011\001\002\000\004\050\030" +
    "\001\002\000\020\002\ufffa\043\ufffa\044\ufffa\047\ufffa\050" +
    "\ufffa\130\ufffa\133\ufffa\001\002\000\006\127\023\130\025" +
    "\001\002\000\006\127\023\130\025\001\002\000\020\043" +
    "\ufff6\044\ufff6\046\ufff6\047\ufff6\050\ufff6\130\ufff6\133\ufff6" +
    "\001\002\000\020\043\ufff7\044\ufff7\046\ufff7\047\ufff7\050" +
    "\ufff7\130\ufff7\133\ufff7\001\002\000\004\002\000\001\002" +
    "\000\006\002\ufffd\050\ufffd\001\002\000\016\043\006\044" +
    "\005\047\012\050\ufffb\130\015\133\011\001\002\000\004" +
    "\026\041\001\002\000\004\127\042\001\002\000\004\106" +
    "\043\001\002\000\004\127\044\001\002\000\016\043\ufff5" +
    "\044\ufff5\047\ufff5\050\ufff5\130\ufff5\133\ufff5\001\002\000" +
    "\004\050\046\001\002\000\020\002\ufff9\043\ufff9\044\ufff9" +
    "\047\ufff9\050\ufff9\130\ufff9\133\ufff9\001\002\000\004\046" +
    "\050\001\002\000\016\043\006\044\005\047\012\050\ufffb" +
    "\130\015\133\011\001\002\000\004\050\052\001\002\000" +
    "\020\002\ufff8\043\ufff8\044\ufff8\047\ufff8\050\ufff8\130\ufff8" +
    "\133\ufff8\001\002\000\006\002\ufffe\050\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\051\000\016\002\007\003\012\004\015\007\013\010" +
    "\003\012\006\001\001\000\014\003\052\004\015\007\013" +
    "\010\003\012\006\001\001\000\006\005\046\006\023\001" +
    "\001\000\004\011\036\001\001\000\014\003\035\004\015" +
    "\007\013\010\003\012\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\025\006\023\001\001\000\002" +
    "\001\001\000\014\003\021\004\015\007\013\010\003\012" +
    "\006\001\001\000\002\001\001\000\014\003\016\004\015" +
    "\007\013\010\003\012\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\026\004\015\007\013\010\003\012\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\033\001\001\000" +
    "\004\006\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\044\004" +
    "\015\007\013\010\003\012\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\050\004\015\007\013\010\003\012" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$RubyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$RubyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$RubyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	

    /**Método que é chamado automaticamente antes de um erro de sintaxe.*/
    public void syntax_error(Symbol s){
        System.out.println("Erro na linha " + (s.right+1) +", Coluna "+s.left+ ". ID "
        +s.value + " não reconhecido." );
    }

    /**Método que é chamado quando não é possível a recuperação de erros.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Falha na compilação.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$RubyParser$actions {


/** Aqui podemos adicionar código JAVA */

  private final RubyParser parser;

  /** Constructor */
  CUP$RubyParser$actions(RubyParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$RubyParser$do_action(
    int                        CUP$RubyParser$act_num,
    java_cup.runtime.lr_parser CUP$RubyParser$parser,
    java.util.Stack            CUP$RubyParser$stack,
    int                        CUP$RubyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$RubyParser$result;

      /* select the action based on the action number */
      switch (CUP$RubyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variavel ::= STRING 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("variavel",5, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variavel ::= IDENTIFICADOR ATRIBUICAO NUMERO 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("variavel",5, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arg ::= NUMERO 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("arg",4, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arg ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("arg",4, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr_for ::= IDENTIFICADOR IN NUMERO DOIS_PONTOS2 NUMERO 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("expr_for",7, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= arg MENOR arg 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= arg MAIOR arg 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // repeticao_while ::= WHILE expr DO codigo END_MINUSCULO 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("repeticao_while",8, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // repeticao_for ::= FOR expr_for codigo END_MINUSCULO 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("repeticao_for",6, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-3)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // condicao ::= IF expr codigo END_MINUSCULO 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("condicao",2, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-3)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigo ::= 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigo ::= variavel codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigo ::= repeticao_while codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= repeticao_for codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= condicao codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
		RESULT = start_val;
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$RubyParser$parser.done_parsing();
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

