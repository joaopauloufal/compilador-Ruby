
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 10 17:18:57 GMT-03:00 2015
//----------------------------------------------------

package sintatico;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 10 17:18:57 GMT-03:00 2015
  */
public class RubyParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public RubyParser() {super();}

  /** Constructor which sets the default scanner. */
  public RubyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public RubyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\002\000" +
    "\002\017\002\000\002\020\002\000\002\021\002\000\002" +
    "\004\012\000\002\022\002\000\002\023\002\000\002\024" +
    "\002\000\002\005\011\000\002\025\002\000\002\005\005" +
    "\000\002\005\002\000\002\026\002\000\002\027\002\000" +
    "\002\030\002\000\002\011\011\000\002\031\002\000\002" +
    "\032\002\000\002\033\002\000\002\013\012\000\002\034" +
    "\002\000\002\035\002\000\002\036\002\000\002\015\014" +
    "\000\002\037\002\000\002\040\002\000\002\041\002\000" +
    "\002\014\011\000\002\042\002\000\002\006\006\000\002" +
    "\043\002\000\002\006\006\000\002\044\002\000\002\045" +
    "\002\000\002\046\002\000\002\047\002\000\002\012\013" +
    "\000\002\050\002\000\002\051\002\000\002\016\007\000" +
    "\002\016\003\000\002\007\003\000\002\007\003\000\002" +
    "\052\002\000\002\053\002\000\002\010\007\000\002\010" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\022\002\ufff9\041\021\042\015\043\006\044" +
    "\005\047\014\130\020\133\013\001\002\000\030\002\ufff9" +
    "\025\ufff9\032\ufff9\041\021\042\015\043\006\044\005\047" +
    "\014\050\ufff9\130\020\133\013\001\002\000\006\127\uffe9" +
    "\130\uffe9\001\002\000\004\130\uffed\001\002\000\030\002" +
    "\ufff9\025\ufff9\032\ufff9\041\021\042\015\043\006\044\005" +
    "\047\014\050\ufff9\130\020\133\013\001\002\000\030\002" +
    "\ufff9\025\ufff9\032\ufff9\041\021\042\015\043\006\044\005" +
    "\047\014\050\ufff9\130\020\133\013\001\002\000\030\002" +
    "\ufff9\025\ufff9\032\ufff9\041\021\042\015\043\006\044\005" +
    "\047\014\050\ufff9\130\020\133\013\001\002\000\004\002" +
    "\107\001\002\000\030\002\uffcb\025\uffcb\032\uffcb\041\uffcb" +
    "\042\uffcb\043\uffcb\044\uffcb\047\uffcb\050\uffcb\130\uffcb\133" +
    "\uffcb\001\002\000\006\127\ufff8\130\ufff8\001\002\000\004" +
    "\130\uffe5\001\002\000\004\002\001\001\002\000\030\002" +
    "\ufff9\025\ufff9\032\ufff9\041\021\042\015\043\006\044\005" +
    "\047\014\050\ufff9\130\020\133\013\001\002\000\004\110" +
    "\uffce\001\002\000\004\130\uffe1\001\002\000\030\002\ufff9" +
    "\025\ufff9\032\ufff9\041\021\042\015\043\006\044\005\047" +
    "\014\050\ufff9\130\020\133\013\001\002\000\012\002\uffff" +
    "\025\uffff\032\uffff\050\uffff\001\002\000\004\130\025\001" +
    "\002\000\022\041\uffe0\042\uffe0\043\uffe0\044\uffe0\047\uffe0" +
    "\050\uffe0\130\uffe0\133\uffe0\001\002\000\022\041\021\042" +
    "\015\043\006\044\005\047\014\050\ufff9\130\020\133\013" +
    "\001\002\000\004\050\uffdf\001\002\000\004\050\031\001" +
    "\002\000\030\002\uffde\025\uffde\032\uffde\041\uffde\042\uffde" +
    "\043\uffde\044\uffde\047\uffde\050\uffde\130\uffde\133\uffde\001" +
    "\002\000\004\110\033\001\002\000\004\127\uffcd\001\002" +
    "\000\004\127\035\001\002\000\030\002\uffcc\025\uffcc\032" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\047\uffcc\050\uffcc" +
    "\130\uffcc\133\uffcc\001\002\000\012\002\ufffa\025\ufffa\032" +
    "\ufffa\050\ufffa\001\002\000\004\130\040\001\002\000\004" +
    "\051\041\001\002\000\004\130\042\001\002\000\006\052" +
    "\uffd1\103\uffd4\001\002\000\004\052\044\001\002\000\022" +
    "\041\uffe4\042\uffe4\043\uffe4\044\uffe4\047\uffe4\050\uffe4\130" +
    "\uffe4\133\uffe4\001\002\000\022\041\021\042\015\043\006" +
    "\044\005\047\014\050\ufff9\130\020\133\013\001\002\000" +
    "\004\050\uffe3\001\002\000\004\050\050\001\002\000\030" +
    "\002\uffe2\025\uffe2\032\uffe2\041\uffe2\042\uffe2\043\uffe2\044" +
    "\uffe2\047\uffe2\050\uffe2\130\uffe2\133\uffe2\001\002\000\004" +
    "\103\052\001\002\000\004\130\uffd3\001\002\000\004\130" +
    "\042\001\002\000\004\052\uffd2\001\002\000\006\127\056" +
    "\130\060\001\002\000\034\025\uffcf\032\uffcf\041\uffcf\042" +
    "\uffcf\043\uffcf\044\uffcf\046\uffcf\047\uffcf\050\uffcf\073\uffcf" +
    "\074\uffcf\130\uffcf\133\uffcf\001\002\000\006\073\102\074" +
    "\101\001\002\000\034\025\uffd0\032\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\046\uffd0\047\uffd0\050\uffd0\073\uffd0\074" +
    "\uffd0\130\uffd0\133\uffd0\001\002\000\026\025\ufff7\032\ufff7" +
    "\041\ufff7\042\ufff7\043\ufff7\044\ufff7\047\ufff7\050\ufff7\130" +
    "\ufff7\133\ufff7\001\002\000\026\025\ufff9\032\ufff9\041\021" +
    "\042\015\043\006\044\005\047\014\050\ufff9\130\020\133" +
    "\013\001\002\000\010\025\ufff6\032\ufff6\050\ufff6\001\002" +
    "\000\010\025\065\032\066\050\uffee\001\002\000\022\041" +
    "\ufff0\042\ufff0\043\ufff0\044\ufff0\047\ufff0\050\ufff0\130\ufff0" +
    "\133\ufff0\001\002\000\006\127\ufff4\130\ufff4\001\002\000" +
    "\004\050\070\001\002\000\030\002\ufff5\025\ufff5\032\ufff5" +
    "\041\ufff5\042\ufff5\043\ufff5\044\ufff5\047\ufff5\050\ufff5\130" +
    "\ufff5\133\ufff5\001\002\000\006\127\056\130\060\001\002" +
    "\000\026\025\ufff3\032\ufff3\041\ufff3\042\ufff3\043\ufff3\044" +
    "\ufff3\047\ufff3\050\ufff3\130\ufff3\133\ufff3\001\002\000\026" +
    "\025\ufff9\032\ufff9\041\021\042\015\043\006\044\005\047" +
    "\014\050\ufff9\130\020\133\013\001\002\000\010\025\ufff2" +
    "\032\ufff2\050\ufff2\001\002\000\010\025\065\032\066\050" +
    "\uffee\001\002\000\004\050\ufff1\001\002\000\022\041\021" +
    "\042\015\043\006\044\005\047\014\050\ufff9\130\020\133" +
    "\013\001\002\000\004\050\uffef\001\002\000\006\127\uffdd" +
    "\130\uffdd\001\002\000\006\127\uffdb\130\uffdb\001\002\000" +
    "\006\127\056\130\060\001\002\000\030\025\uffda\032\uffda" +
    "\041\uffda\042\uffda\043\uffda\044\uffda\046\uffda\047\uffda\050" +
    "\uffda\130\uffda\133\uffda\001\002\000\006\127\056\130\060" +
    "\001\002\000\030\025\uffdc\032\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\046\uffdc\047\uffdc\050\uffdc\130\uffdc\133\uffdc" +
    "\001\002\000\004\002\000\001\002\000\012\002\ufffc\025" +
    "\ufffc\032\ufffc\050\ufffc\001\002\000\012\002\ufffd\025\ufffd" +
    "\032\ufffd\050\ufffd\001\002\000\012\002\ufffb\025\ufffb\032" +
    "\ufffb\050\ufffb\001\002\000\004\130\114\001\002\000\004" +
    "\026\uffd9\001\002\000\022\041\uffec\042\uffec\043\uffec\044" +
    "\uffec\047\uffec\050\uffec\130\uffec\133\uffec\001\002\000\022" +
    "\041\021\042\015\043\006\044\005\047\014\050\ufff9\130" +
    "\020\133\013\001\002\000\004\050\uffeb\001\002\000\004" +
    "\050\121\001\002\000\030\002\uffea\025\uffea\032\uffea\041" +
    "\uffea\042\uffea\043\uffea\044\uffea\047\uffea\050\uffea\130\uffea" +
    "\133\uffea\001\002\000\004\026\123\001\002\000\004\127" +
    "\uffd8\001\002\000\004\127\125\001\002\000\004\106\uffd7" +
    "\001\002\000\004\106\127\001\002\000\004\127\uffd6\001" +
    "\002\000\004\127\131\001\002\000\022\041\uffd5\042\uffd5" +
    "\043\uffd5\044\uffd5\047\uffd5\050\uffd5\130\uffd5\133\uffd5\001" +
    "\002\000\006\127\056\130\060\001\002\000\004\046\134" +
    "\001\002\000\022\041\uffe8\042\uffe8\043\uffe8\044\uffe8\047" +
    "\uffe8\050\uffe8\130\uffe8\133\uffe8\001\002\000\022\041\021" +
    "\042\015\043\006\044\005\047\014\050\ufff9\130\020\133" +
    "\013\001\002\000\004\050\uffe7\001\002\000\004\050\140" +
    "\001\002\000\030\002\uffe6\025\uffe6\032\uffe6\041\uffe6\042" +
    "\uffe6\043\uffe6\044\uffe6\047\uffe6\050\uffe6\130\uffe6\133\uffe6" +
    "\001\002\000\012\002\ufffe\025\ufffe\032\ufffe\050\ufffe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\022\002\011\003\015\004\021\010\016\011" +
    "\003\013\007\014\006\015\010\001\001\000\020\003\140" +
    "\004\021\010\016\011\003\013\007\014\006\015\010\001" +
    "\001\000\004\031\131\001\001\000\004\026\112\001\001" +
    "\000\020\003\111\004\021\010\016\011\003\013\007\014" +
    "\006\015\010\001\001\000\020\003\110\004\021\010\016" +
    "\011\003\013\007\014\006\015\010\001\001\000\020\003" +
    "\107\004\021\010\016\011\003\013\007\014\006\015\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\054\001\001\000\004\034\036\001\001\000\002\001\001" +
    "\000\020\003\035\004\021\010\016\011\003\013\007\014" +
    "\006\015\010\001\001\000\004\052\031\001\001\000\004" +
    "\037\023\001\001\000\020\003\022\004\021\010\016\011" +
    "\003\013\007\014\006\015\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\025\001\001\000\020\003" +
    "\026\004\021\010\016\011\003\013\007\014\006\015\010" +
    "\001\001\000\004\041\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\042\001\001" +
    "\000\004\050\050\001\001\000\002\001\001\000\004\035" +
    "\044\001\001\000\020\003\045\004\021\010\016\011\003" +
    "\013\007\014\006\015\010\001\001\000\004\036\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\052\001\001\000\004\016\053\001\001\000" +
    "\002\001\001\000\006\006\060\007\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\061\001\001\000\020\003\062\004\021\010\016\011\003" +
    "\013\007\014\006\015\010\001\001\000\004\021\063\001" +
    "\001\000\004\005\066\001\001\000\004\025\076\001\001" +
    "\000\004\022\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\071\007\056\001\001\000\004\023\072" +
    "\001\001\000\020\003\073\004\021\010\016\011\003\013" +
    "\007\014\006\015\010\001\001\000\004\024\074\001\001" +
    "\000\004\005\075\001\001\000\002\001\001\000\020\003" +
    "\077\004\021\010\016\011\003\013\007\014\006\015\010" +
    "\001\001\000\002\001\001\000\004\042\104\001\001\000" +
    "\004\043\102\001\001\000\004\007\103\001\001\000\002" +
    "\001\001\000\004\007\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\114\001\001\000\004\044\121\001" +
    "\001\000\004\027\115\001\001\000\020\003\116\004\021" +
    "\010\016\011\003\013\007\014\006\015\010\001\001\000" +
    "\004\030\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\123\001\001\000\002\001" +
    "\001\000\004\046\125\001\001\000\002\001\001\000\004" +
    "\047\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\132\007\056\001\001\000\002\001\001\000\004" +
    "\032\134\001\001\000\020\003\135\004\021\010\016\011" +
    "\003\013\007\014\006\015\010\001\001\000\004\033\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$RubyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$RubyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$RubyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	

    /**Método que é chamado automaticamente antes de um erro de sintaxe.*/
    public void syntax_error(Symbol s){
        System.out.println("Erro na linha " + (s.right+1) +", Coluna "+s.left+ ". ID "
        +s.value + " não reconhecido." );
    }

    /**Método que é chamado quando não é possível a recuperação de erros.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Falha na compilação.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$RubyParser$actions {


/** Aqui podemos adicionar código JAVA */

  private final RubyParser parser;

  /** Constructor */
  CUP$RubyParser$actions(RubyParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$RubyParser$do_action(
    int                        CUP$RubyParser$act_num,
    java_cup.runtime.lr_parser CUP$RubyParser$parser,
    java.util.Stack            CUP$RubyParser$stack,
    int                        CUP$RubyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$RubyParser$result;

      /* select the action based on the action number */
      switch (CUP$RubyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // variavel ::= STRING 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.peek()).value;
		 System.out.println("" + str); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("variavel",6, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // variavel ::= IDENTIFICADOR NT$27 ATRIBUICAO NT$28 NUMERO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.peek()).value;
		 System.out.println("" + num); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("variavel",6, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$28 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).value;
 System.out.print(" = "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$28",41, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$27 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.peek()).value;
 System.out.print("" + id); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$27",40, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arg ::= NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.peek()).value;
		 System.out.print("" + num); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("arg",5, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arg ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.peek()).value;
		 System.out.print("" + id); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("arg",5, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // identificadores_funcao ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.peek()).value;
		 System.out.print("" + id); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("identificadores_funcao",12, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // identificadores_funcao ::= IDENTIFICADOR NT$25 VIRGULA NT$26 identificadores_funcao 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)).value;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("identificadores_funcao",12, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$26 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).value;
 System.out.print(", "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$26",39, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$25 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.peek()).value;
 System.out.print("" + id); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$25",38, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr_for ::= IDENTIFICADOR NT$21 IN NT$22 NUMERO NT$23 DOIS_PONTOS2 NT$24 NUMERO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-8)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)).value;
		int num1left = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.peek()).value;
		 System.out.print("" + num1); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("expr_for",8, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-8)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$24 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-6)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).value;
 System.out.print(" .. "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$24",37, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$23 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.peek()).value;
 System.out.print("" + num); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$23",36, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$22 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).value;
 System.out.print(" in "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$22",35, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$21 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.peek()).value;
 System.out.print("" + id); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$21",34, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= arg MENOR NT$20 arg 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-3)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$20 ::= 
            {
              Object RESULT =null;
 System.out.print(" < "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$20",33, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= arg MAIOR NT$19 arg 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-3)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$19 ::= 
            {
              Object RESULT =null;
 System.out.print(" > "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$19",32, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // classe ::= CLASS NT$16 IDENTIFICADOR NT$17 codigo NT$18 END_MINUSCULO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
		 System.out.println("end"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("classe",10, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-6)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
 System.out.println(""); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$18",31, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
 System.out.print("\t"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$17",30, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$16 ::= 
            {
              Object RESULT =null;
 System.out.print("class "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$16",29, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcao ::= DEF NT$13 IDENTIFICADOR PARENTESE_ABERTURA identificadores_funcao PARENTESE_FECHAMENTO NT$14 codigo NT$15 END_MINUSCULO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
		 System.out.println("end"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("funcao",11, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-9)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
 System.out.println(""); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$15",28, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)).value;
 System.out.print("\t"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$14",27, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$13 ::= 
            {
              Object RESULT =null;
 System.out.print("def "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$13",26, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // repeticao_while ::= WHILE NT$10 expr DO NT$11 codigo NT$12 END_MINUSCULO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
		 System.out.println("end"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("repeticao_while",9, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-7)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
 System.out.println(""); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$12",25, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).value;
 System.out.print("\t"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$11",24, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$10 ::= 
            {
              Object RESULT =null;
 System.out.print("while "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$10",23, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // repeticao_for ::= FOR NT$7 expr_for NT$8 codigo NT$9 END_MINUSCULO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
		 System.out.println("end"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("repeticao_for",7, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-6)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
 System.out.println(""); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$9",22, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
 System.out.print("\t"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$8",21, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$7 ::= 
            {
              Object RESULT =null;
 System.out.print("for "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$7",20, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cod_condicao ::= 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("cod_condicao",3, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cod_condicao ::= ELSE NT$6 codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
		 System.out.println(""); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("cod_condicao",3, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$6 ::= 
            {
              Object RESULT =null;
 System.out.print("else ");  System.out.print("\t"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$6",19, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cod_condicao ::= ELSIF NT$3 expr NT$4 codigo NT$5 cod_condicao 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("cod_condicao",3, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-6)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
 System.out.println(""); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$5",18, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
 System.out.print("\t"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$4",17, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$3 ::= 
            {
              Object RESULT =null;
 System.out.print("elsif "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$3",16, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // condicao ::= IF NT$0 expr NT$1 codigo NT$2 cod_condicao END_MINUSCULO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).value;
		 System.out.println("end"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("condicao",2, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-7)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
 System.out.println(""); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$2",15, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
 System.out.print("\t"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$1",14, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.print("if "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$0",13, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= variavel codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigo ::= classe codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigo ::= funcao codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigo ::= repeticao_while codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= repeticao_for codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= condicao codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
		RESULT = start_val;
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$RubyParser$parser.done_parsing();
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

