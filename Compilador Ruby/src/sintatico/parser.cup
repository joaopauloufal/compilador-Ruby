package sintatico;
import java_cup.runtime.*;




parser code /**Código para erros de sintaxe.*/
{:

	

    /**Método que é chamado automaticamente antes de um erro de sintaxe.*/
    public void syntax_error(Symbol s){
        System.out.println("Erro na linha " + (s.right+1) +", Coluna "+s.left+ ". ID "
        +s.value + " não reconhecido." );
    }

    /**Método que é chamado quando não é possível a recuperação de erros.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Falha na compilação.");
    }
:}


action code
{:
/** Aqui podemos adicionar código JAVA */
:}


/* Aqui espeficicamos os terminais da linguagem. */
terminal BEGIN_MAIUSCULO, ENSURE, ASSERT, SELF, WHEN, END_MAIUSCULO, FALSE, NOT, SUPER, ALIAS, DEFINED, OR, THEN, YIELD , AND, REDO, TRUE,
	ELSE, IN, RESCUE, UNDEF, BREAK, ELSIF, MODULE, RETRY, UNLESS, NEXT, RETURN, BEGIN_MINUSCULO, CLASS, DEF, FOR, WHILE, UNTIL, DO, IF, END_MINUSCULO,
	PARENTESE_ABERTURA, PARENTESE_FECHAMENTO, CHAVE_ABERTURA, CHAVE_FECHAMENTO, COLCHETE_ABERTURA, COLCHETE_FECHAMENTO, MAIS, MENOS, VEZES, BARRA,
	BARRA_BARRA, PORCENTAGEM, MENOR_MENOR, MAIOR_MAIOR, E_COMERCIAL, BARRA_VERTICAL, POTENCIACAO, TIL, MENOR, MAIOR, MENOR_OU_IGUAL, MAIOR_OU_IGUAL,
	IGUAL_IGUAL, DIFERENTE1, DIFERENTE2, ARROBA, VIRGULA, DOIS_PONTOS, PONTO, DOIS_PONTOS2, APOSTROFO, ATRIBUICAO, PONTO_E_VIRGULA, INCREMENTO,
	DECREMENTO, INCREMENTO_MULTIP, INCREMENTO_DIVISAO, INCREMENTO_DIVISAO_DIVISAO, PORCENTAGEM_IGUAL, E_COMERCIAL_IGUAL, BARRA_VERTICAL_IGUAL, PONTENCIACAO_IGUAL,
	MAIOR_MAIOR_IGUAL, MENOR_MENOR_IGUAL, MULTIP_MULTIP_IGUAL, COMENTARIO, NUMERO, IDENTIFICADOR, TIPO2, PUTS, STRING, QUEBRA_DE_LINHA, CASE, VEZES_VEZES;



/*
* Aqui estão os não-terminais

start with program;
*/
non terminal program, codigo, condicao, cod_condicao, expr, arg, variavel, repeticao_for, expr_for, repeticao_while, funcao, identificadores_funcao;


/* Precedencias */
precedence left MAIS, MENOS;
precedence left VEZES, BARRA;

/*  Declaracao da gramatica  */

program ::= codigo;
codigo ::= condicao codigo
		| repeticao_for codigo
		| repeticao_while codigo
		| funcao codigo		
		| variavel codigo
		| "";

//condicao ::= IF expr QUEBRA_DE_LINHA codigo QUEBRA_DE_LINHA END_MINUSCULO;// Nao funcionando devido ao QUEBRA_DE_LINHA


//Gramaticas Condicao, repeticao_for, repeticao_while
condicao ::= IF expr codigo cod_condicao END_MINUSCULO;// Funcionando sem o QUEBRA_DE_LINHA

cod_condicao ::= ELSIF expr codigo cod_condicao
		|ELSE codigo
		|"";

repeticao_for ::= FOR expr_for codigo END_MINUSCULO;// Tem que ter o espcao entre os dois pontos. Ex.: 0 .. 5

repeticao_while ::= WHILE expr DO codigo END_MINUSCULO;

funcao ::= DEF IDENTIFICADOR PARENTESE_ABERTURA identificadores_funcao PARENTESE_FECHAMENTO codigo END_MINUSCULO;

//funcao ::= DEF IDENTIFICADOR PARENTESE_ABERTURA;


//Gramaticas complementares
expr ::= arg MAIOR arg
		| arg MENOR arg
		;
		
expr_for ::= IDENTIFICADOR IN NUMERO DOIS_PONTOS2 NUMERO;

identificadores_funcao ::= IDENTIFICADOR VIRGULA identificadores_funcao
		| IDENTIFICADOR;
		
arg ::= IDENTIFICADOR | NUMERO;

variavel ::= IDENTIFICADOR ATRIBUICAO NUMERO | STRING;

