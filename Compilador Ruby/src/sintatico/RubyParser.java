
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 17 16:10:18 BRT 2015
//----------------------------------------------------

package sintatico;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 17 16:10:18 BRT 2015
  */
public class RubyParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public RubyParser() {super();}

  /** Constructor which sets the default scanner. */
  public RubyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public RubyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\002\000" +
    "\002\017\002\000\002\004\010\000\002\005\006\000\002" +
    "\005\004\000\002\005\002\000\002\020\002\000\002\011" +
    "\007\000\002\021\002\000\002\013\010\000\002\022\002" +
    "\000\002\015\012\000\002\023\002\000\002\014\007\000" +
    "\002\024\002\000\002\006\006\000\002\025\002\000\002" +
    "\006\006\000\002\026\002\000\002\027\002\000\002\030" +
    "\002\000\002\031\002\000\002\012\013\000\002\032\002" +
    "\000\002\033\002\000\002\016\007\000\002\016\003\000" +
    "\002\007\003\000\002\007\003\000\002\034\002\000\002" +
    "\035\002\000\002\010\007\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\022\002\ufff9\041\021\042\015\043\006\044" +
    "\005\047\014\130\020\133\013\001\002\000\030\002\ufff9" +
    "\025\ufff9\032\ufff9\041\021\042\015\043\006\044\005\047" +
    "\014\050\ufff9\130\020\133\013\001\002\000\006\127\ufff1" +
    "\130\ufff1\001\002\000\004\130\ufff3\001\002\000\030\002" +
    "\ufff9\025\ufff9\032\ufff9\041\021\042\015\043\006\044\005" +
    "\047\014\050\ufff9\130\020\133\013\001\002\000\030\002" +
    "\ufff9\025\ufff9\032\ufff9\041\021\042\015\043\006\044\005" +
    "\047\014\050\ufff9\130\020\133\013\001\002\000\030\002" +
    "\ufff9\025\ufff9\032\ufff9\041\021\042\015\043\006\044\005" +
    "\047\014\050\ufff9\130\020\133\013\001\002\000\004\002" +
    "\075\001\002\000\030\002\uffd9\025\uffd9\032\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\044\uffd9\047\uffd9\050\uffd9\130\uffd9\133" +
    "\uffd9\001\002\000\006\127\051\130\053\001\002\000\004" +
    "\130\uffef\001\002\000\004\002\001\001\002\000\030\002" +
    "\ufff9\025\ufff9\032\ufff9\041\021\042\015\043\006\044\005" +
    "\047\014\050\ufff9\130\020\133\013\001\002\000\004\110" +
    "\uffdc\001\002\000\004\130\uffed\001\002\000\030\002\ufff9" +
    "\025\ufff9\032\ufff9\041\021\042\015\043\006\044\005\047" +
    "\014\050\ufff9\130\020\133\013\001\002\000\012\002\uffff" +
    "\025\uffff\032\uffff\050\uffff\001\002\000\004\130\025\001" +
    "\002\000\022\041\021\042\015\043\006\044\005\047\014" +
    "\050\ufff9\130\020\133\013\001\002\000\004\050\027\001" +
    "\002\000\030\002\uffec\025\uffec\032\uffec\041\uffec\042\uffec" +
    "\043\uffec\044\uffec\047\uffec\050\uffec\130\uffec\133\uffec\001" +
    "\002\000\004\110\031\001\002\000\004\127\uffdb\001\002" +
    "\000\004\127\033\001\002\000\030\002\uffda\025\uffda\032" +
    "\uffda\041\uffda\042\uffda\043\uffda\044\uffda\047\uffda\050\uffda" +
    "\130\uffda\133\uffda\001\002\000\012\002\ufffa\025\ufffa\032" +
    "\ufffa\050\ufffa\001\002\000\004\130\036\001\002\000\004" +
    "\051\037\001\002\000\004\130\040\001\002\000\006\052" +
    "\uffdf\103\uffe2\001\002\000\004\052\042\001\002\000\022" +
    "\041\021\042\015\043\006\044\005\047\014\050\ufff9\130" +
    "\020\133\013\001\002\000\004\050\044\001\002\000\030" +
    "\002\uffee\025\uffee\032\uffee\041\uffee\042\uffee\043\uffee\044" +
    "\uffee\047\uffee\050\uffee\130\uffee\133\uffee\001\002\000\004" +
    "\103\046\001\002\000\004\130\uffe1\001\002\000\004\130" +
    "\040\001\002\000\004\052\uffe0\001\002\000\034\025\uffdd" +
    "\032\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\046\uffdd\047" +
    "\uffdd\050\uffdd\073\uffdd\074\uffdd\130\uffdd\133\uffdd\001\002" +
    "\000\006\073\070\074\067\001\002\000\034\025\uffde\032" +
    "\uffde\041\uffde\042\uffde\043\uffde\044\uffde\046\uffde\047\uffde" +
    "\050\uffde\073\uffde\074\uffde\130\uffde\133\uffde\001\002\000" +
    "\026\025\ufff9\032\ufff9\041\021\042\015\043\006\044\005" +
    "\047\014\050\ufff9\130\020\133\013\001\002\000\010\025" +
    "\ufff8\032\ufff8\050\ufff8\001\002\000\010\025\057\032\060" +
    "\050\ufff4\001\002\000\022\041\021\042\015\043\006\044" +
    "\005\047\014\050\ufff9\130\020\133\013\001\002\000\006" +
    "\127\051\130\053\001\002\000\004\050\062\001\002\000" +
    "\030\002\ufff7\025\ufff7\032\ufff7\041\ufff7\042\ufff7\043\ufff7" +
    "\044\ufff7\047\ufff7\050\ufff7\130\ufff7\133\ufff7\001\002\000" +
    "\026\025\ufff9\032\ufff9\041\021\042\015\043\006\044\005" +
    "\047\014\050\ufff9\130\020\133\013\001\002\000\010\025" +
    "\057\032\060\050\ufff4\001\002\000\004\050\ufff6\001\002" +
    "\000\004\050\ufff5\001\002\000\006\127\uffeb\130\uffeb\001" +
    "\002\000\006\127\uffe9\130\uffe9\001\002\000\006\127\051" +
    "\130\053\001\002\000\030\025\uffe8\032\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\044\uffe8\046\uffe8\047\uffe8\050\uffe8\130\uffe8" +
    "\133\uffe8\001\002\000\006\127\051\130\053\001\002\000" +
    "\030\025\uffea\032\uffea\041\uffea\042\uffea\043\uffea\044\uffea" +
    "\046\uffea\047\uffea\050\uffea\130\uffea\133\uffea\001\002\000" +
    "\004\002\000\001\002\000\012\002\ufffc\025\ufffc\032\ufffc" +
    "\050\ufffc\001\002\000\012\002\ufffd\025\ufffd\032\ufffd\050" +
    "\ufffd\001\002\000\012\002\ufffb\025\ufffb\032\ufffb\050\ufffb" +
    "\001\002\000\004\130\103\001\002\000\022\041\021\042" +
    "\015\043\006\044\005\047\014\050\ufff9\130\020\133\013" +
    "\001\002\000\004\026\uffe7\001\002\000\004\026\105\001" +
    "\002\000\004\127\uffe6\001\002\000\004\127\107\001\002" +
    "\000\004\106\uffe5\001\002\000\004\106\111\001\002\000" +
    "\004\127\uffe4\001\002\000\004\127\113\001\002\000\022" +
    "\041\uffe3\042\uffe3\043\uffe3\044\uffe3\047\uffe3\050\uffe3\130" +
    "\uffe3\133\uffe3\001\002\000\004\050\115\001\002\000\030" +
    "\002\ufff2\025\ufff2\032\ufff2\041\ufff2\042\ufff2\043\ufff2\044" +
    "\ufff2\047\ufff2\050\ufff2\130\ufff2\133\ufff2\001\002\000\006" +
    "\127\051\130\053\001\002\000\004\046\120\001\002\000" +
    "\022\041\021\042\015\043\006\044\005\047\014\050\ufff9" +
    "\130\020\133\013\001\002\000\004\050\122\001\002\000" +
    "\030\002\ufff0\025\ufff0\032\ufff0\041\ufff0\042\ufff0\043\ufff0" +
    "\044\ufff0\047\ufff0\050\ufff0\130\ufff0\133\ufff0\001\002\000" +
    "\012\002\ufffe\025\ufffe\032\ufffe\050\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\022\002\011\003\015\004\021\010\016\011" +
    "\003\013\007\014\006\015\010\001\001\000\020\003\122" +
    "\004\021\010\016\011\003\013\007\014\006\015\010\001" +
    "\001\000\004\021\115\001\001\000\004\020\100\001\001" +
    "\000\020\003\077\004\021\010\016\011\003\013\007\014" +
    "\006\015\010\001\001\000\020\003\076\004\021\010\016" +
    "\011\003\013\007\014\006\015\010\001\001\000\020\003" +
    "\075\004\021\010\016\011\003\013\007\014\006\015\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\053\007\051\001\001\000\004\022\034\001\001\000\002" +
    "\001\001\000\020\003\033\004\021\010\016\011\003\013" +
    "\007\014\006\015\010\001\001\000\004\034\027\001\001" +
    "\000\004\023\023\001\001\000\020\003\022\004\021\010" +
    "\016\011\003\013\007\014\006\015\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\025\004\021\010" +
    "\016\011\003\013\007\014\006\015\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\040\001\001\000\004\032\044\001\001\000\002\001\001" +
    "\000\020\003\042\004\021\010\016\011\003\013\007\014" +
    "\006\015\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\046\001\001\000\004\016" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\054\004\021\010" +
    "\016\011\003\013\007\014\006\015\010\001\001\000\004" +
    "\017\055\001\001\000\004\005\060\001\001\000\020\003" +
    "\065\004\021\010\016\011\003\013\007\014\006\015\010" +
    "\001\001\000\006\006\062\007\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\063\004\021\010\016" +
    "\011\003\013\007\014\006\015\010\001\001\000\004\005" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\072\001\001\000\004\025\070\001\001\000\004\007" +
    "\071\001\001\000\002\001\001\000\004\007\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\101\001\001" +
    "\000\020\003\113\004\021\010\016\011\003\013\007\014" +
    "\006\015\010\001\001\000\004\026\103\001\001\000\002" +
    "\001\001\000\004\027\105\001\001\000\002\001\001\000" +
    "\004\030\107\001\001\000\002\001\001\000\004\031\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\116\007\051\001\001" +
    "\000\002\001\001\000\020\003\120\004\021\010\016\011" +
    "\003\013\007\014\006\015\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$RubyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$RubyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$RubyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	

    /**Método que é chamado automaticamente antes de um erro de sintaxe.*/
    public void syntax_error(Symbol s){
        System.out.println("Erro na linha " + (s.right+1) +", Coluna "+s.left+ ". ID "
        +s.value + " não reconhecido." );
    }

    /**Método que é chamado quando não é possível a recuperação de erros.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Falha na compilação.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$RubyParser$actions {



  int inc = 0;

  public String quebraDeLinha(){
  
  	return "\n";
  
  }

  private final RubyParser parser;

  /** Constructor */
  CUP$RubyParser$actions(RubyParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$RubyParser$do_action(
    int                        CUP$RubyParser$act_num,
    java_cup.runtime.lr_parser CUP$RubyParser$parser,
    java.util.Stack            CUP$RubyParser$stack,
    int                        CUP$RubyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$RubyParser$result;

      /* select the action based on the action number */
      switch (CUP$RubyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variavel ::= STRING 
            {
              Object RESULT =null;
		 System.out.println("STRING"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("variavel",6, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variavel ::= IDENTIFICADOR NT$13 ATRIBUICAO NT$14 NUMERO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
		 System.out.println("NUMERO"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("variavel",6, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
 System.out.print(" = "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$14",27, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$13 ::= 
            {
              Object RESULT =null;
 System.out.print("IDENTIFICADOR"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$13",26, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arg ::= NUMERO 
            {
              Object RESULT =null;
		 System.out.print("NUMERO"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("arg",5, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arg ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		 System.out.print("IDENTIFICADOR"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("arg",5, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // identificadores_funcao ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		 System.out.print("IDENTIFICADOR"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("identificadores_funcao",12, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // identificadores_funcao ::= IDENTIFICADOR NT$11 VIRGULA NT$12 identificadores_funcao 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("identificadores_funcao",12, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
 System.out.print(", "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$12",25, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$11 ::= 
            {
              Object RESULT =null;
 System.out.print("IDENTIFICADOR"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$11",24, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr_for ::= IDENTIFICADOR NT$7 IN NT$8 NUMERO NT$9 DOIS_PONTOS2 NT$10 NUMERO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
		 System.out.print("NUMERO \n"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("expr_for",8, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-8)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
 System.out.print(" .. "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$10",23, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
 System.out.print(" NUMERO"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$9",22, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
 System.out.print(" IN "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$8",21, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$7 ::= 
            {
              Object RESULT =null;
 System.out.print(" IDENTIFICADOR "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$7",20, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= arg MENOR NT$6 arg 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-3)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$6 ::= 
            {
              Object RESULT =null;
 System.out.print(" < "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$6",19, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= arg MAIOR NT$5 arg 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-3)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$5 ::= 
            {
              Object RESULT =null;
 System.out.print(" > "); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$5",18, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // classe ::= CLASS NT$4 IDENTIFICADOR codigo END_MINUSCULO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-3)).value;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("classe",10, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$4 ::= 
            {
              Object RESULT =null;
 System.out.print("CLASS \n"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$4",17, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funcao ::= DEF NT$3 IDENTIFICADOR PARENTESE_ABERTURA identificadores_funcao PARENTESE_FECHAMENTO codigo END_MINUSCULO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-6)).value;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("funcao",11, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-7)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$3 ::= 
            {
              Object RESULT =null;
 System.out.print("DEF"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$3",16, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // repeticao_while ::= WHILE NT$2 expr DO codigo END_MINUSCULO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)).value;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("repeticao_while",9, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-5)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$2 ::= 
            {
              Object RESULT =null;
 System.out.print("WHILE"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$2",15, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // repeticao_for ::= FOR NT$1 expr_for codigo END_MINUSCULO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-3)).value;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("repeticao_for",7, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$1 ::= 
            {
              Object RESULT =null;
 System.out.print("FOR"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$1",14, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cod_condicao ::= 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("cod_condicao",3, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cod_condicao ::= ELSE codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("cod_condicao",3, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cod_condicao ::= ELSIF expr codigo cod_condicao 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("cod_condicao",3, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-3)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // condicao ::= IF expr codigo NT$0 cod_condicao END_MINUSCULO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)).value;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("condicao",2, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-5)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("CONDIÇÃO"); 
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("NT$0",13, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= variavel codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigo ::= classe codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigo ::= funcao codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigo ::= repeticao_while codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= repeticao_for codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= condicao codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
		RESULT = start_val;
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$RubyParser$parser.done_parsing();
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

