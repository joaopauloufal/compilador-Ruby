
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 10 11:16:55 GMT-03:00 2015
//----------------------------------------------------

package sintatico;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 10 11:16:55 GMT-03:00 2015
  */
public class RubyParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public RubyParser() {super();}

  /** Constructor which sets the default scanner. */
  public RubyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public RubyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\002\000\002\004\007\000" +
    "\002\005\006\000\002\005\004\000\002\005\002\000\002" +
    "\011\006\000\002\013\007\000\002\014\011\000\002\006" +
    "\005\000\002\006\005\000\002\012\007\000\002\015\005" +
    "\000\002\015\003\000\002\007\003\000\002\007\003\000" +
    "\002\010\005\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\020\002\ufffa\042\014\043\006\044\005\047" +
    "\013\130\017\133\012\001\002\000\026\002\ufffa\025\ufffa" +
    "\032\ufffa\042\014\043\006\044\005\047\013\050\ufffa\130" +
    "\017\133\012\001\002\000\006\127\036\130\040\001\002" +
    "\000\004\130\062\001\002\000\026\002\ufffa\025\ufffa\032" +
    "\ufffa\042\014\043\006\044\005\047\013\050\ufffa\130\017" +
    "\133\012\001\002\000\026\002\ufffa\025\ufffa\032\ufffa\042" +
    "\014\043\006\044\005\047\013\050\ufffa\130\017\133\012" +
    "\001\002\000\004\002\057\001\002\000\026\002\uffea\025" +
    "\uffea\032\uffea\042\uffea\043\uffea\044\uffea\047\uffea\050\uffea" +
    "\130\uffea\133\uffea\001\002\000\006\127\036\130\040\001" +
    "\002\000\004\130\025\001\002\000\004\002\001\001\002" +
    "\000\026\002\ufffa\025\ufffa\032\ufffa\042\014\043\006\044" +
    "\005\047\013\050\ufffa\130\017\133\012\001\002\000\004" +
    "\110\022\001\002\000\026\002\ufffa\025\ufffa\032\ufffa\042" +
    "\014\043\006\044\005\047\013\050\ufffa\130\017\133\012" +
    "\001\002\000\012\002\uffff\025\uffff\032\uffff\050\uffff\001" +
    "\002\000\004\127\023\001\002\000\026\002\uffeb\025\uffeb" +
    "\032\uffeb\042\uffeb\043\uffeb\044\uffeb\047\uffeb\050\uffeb\130" +
    "\uffeb\133\uffeb\001\002\000\012\002\ufffb\025\ufffb\032\ufffb" +
    "\050\ufffb\001\002\000\004\051\026\001\002\000\004\130" +
    "\027\001\002\000\006\052\uffee\103\034\001\002\000\004" +
    "\052\031\001\002\000\020\042\014\043\006\044\005\047" +
    "\013\050\ufffa\130\017\133\012\001\002\000\004\050\033" +
    "\001\002\000\026\002\ufff3\025\ufff3\032\ufff3\042\ufff3\043" +
    "\ufff3\044\ufff3\047\ufff3\050\ufff3\130\ufff3\133\ufff3\001\002" +
    "\000\004\130\027\001\002\000\004\052\uffef\001\002\000" +
    "\032\025\uffec\032\uffec\042\uffec\043\uffec\044\uffec\046\uffec" +
    "\047\uffec\050\uffec\073\uffec\074\uffec\130\uffec\133\uffec\001" +
    "\002\000\006\073\054\074\053\001\002\000\032\025\uffed" +
    "\032\uffed\042\uffed\043\uffed\044\uffed\046\uffed\047\uffed\050" +
    "\uffed\073\uffed\074\uffed\130\uffed\133\uffed\001\002\000\024" +
    "\025\ufffa\032\ufffa\042\014\043\006\044\005\047\013\050" +
    "\ufffa\130\017\133\012\001\002\000\010\025\043\032\044" +
    "\050\ufff6\001\002\000\020\042\014\043\006\044\005\047" +
    "\013\050\ufffa\130\017\133\012\001\002\000\006\127\036" +
    "\130\040\001\002\000\004\050\046\001\002\000\026\002" +
    "\ufff9\025\ufff9\032\ufff9\042\ufff9\043\ufff9\044\ufff9\047\ufff9" +
    "\050\ufff9\130\ufff9\133\ufff9\001\002\000\024\025\ufffa\032" +
    "\ufffa\042\014\043\006\044\005\047\013\050\ufffa\130\017" +
    "\133\012\001\002\000\010\025\043\032\044\050\ufff6\001" +
    "\002\000\004\050\ufff8\001\002\000\004\050\ufff7\001\002" +
    "\000\006\127\036\130\040\001\002\000\006\127\036\130" +
    "\040\001\002\000\026\025\ufff1\032\ufff1\042\ufff1\043\ufff1" +
    "\044\ufff1\046\ufff1\047\ufff1\050\ufff1\130\ufff1\133\ufff1\001" +
    "\002\000\026\025\ufff2\032\ufff2\042\ufff2\043\ufff2\044\ufff2" +
    "\046\ufff2\047\ufff2\050\ufff2\130\ufff2\133\ufff2\001\002\000" +
    "\004\002\000\001\002\000\012\002\ufffc\025\ufffc\032\ufffc" +
    "\050\ufffc\001\002\000\012\002\ufffd\025\ufffd\032\ufffd\050" +
    "\ufffd\001\002\000\004\026\066\001\002\000\020\042\014" +
    "\043\006\044\005\047\013\050\ufffa\130\017\133\012\001" +
    "\002\000\004\050\065\001\002\000\026\002\ufff5\025\ufff5" +
    "\032\ufff5\042\ufff5\043\ufff5\044\ufff5\047\ufff5\050\ufff5\130" +
    "\ufff5\133\ufff5\001\002\000\004\127\067\001\002\000\004" +
    "\106\070\001\002\000\004\127\071\001\002\000\020\042" +
    "\ufff0\043\ufff0\044\ufff0\047\ufff0\050\ufff0\130\ufff0\133\ufff0" +
    "\001\002\000\004\046\073\001\002\000\020\042\014\043" +
    "\006\044\005\047\013\050\ufffa\130\017\133\012\001\002" +
    "\000\004\050\075\001\002\000\026\002\ufff4\025\ufff4\032" +
    "\ufff4\042\ufff4\043\ufff4\044\ufff4\047\ufff4\050\ufff4\130\ufff4" +
    "\133\ufff4\001\002\000\012\002\ufffe\025\ufffe\032\ufffe\050" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\020\002\010\003\014\004\017\010\015\011" +
    "\003\013\006\014\007\001\001\000\016\003\075\004\017" +
    "\010\015\011\003\013\006\014\007\001\001\000\006\006" +
    "\071\007\036\001\001\000\004\012\062\001\001\000\016" +
    "\003\060\004\017\010\015\011\003\013\006\014\007\001" +
    "\001\000\016\003\057\004\017\010\015\011\003\013\006" +
    "\014\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\040\007\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\023\004\017\010\015\011\003\013" +
    "\006\014\007\001\001\000\002\001\001\000\016\003\020" +
    "\004\017\010\015\011\003\013\006\014\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\031\004\017" +
    "\010\015\011\003\013\006\014\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\041\004\017\010\015\011\003\013\006" +
    "\014\007\001\001\000\004\005\044\001\001\000\016\003" +
    "\051\004\017\010\015\011\003\013\006\014\007\001\001" +
    "\000\006\006\046\007\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\047\004\017\010\015\011\003" +
    "\013\006\014\007\001\001\000\004\005\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\055\001\001" +
    "\000\004\007\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\063\004\017\010\015\011" +
    "\003\013\006\014\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\073" +
    "\004\017\010\015\011\003\013\006\014\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$RubyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$RubyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$RubyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	

    /**Método que é chamado automaticamente antes de um erro de sintaxe.*/
    public void syntax_error(Symbol s){
        System.out.println("Erro na linha " + (s.right+1) +", Coluna "+s.left+ ". ID "
        +s.value + " não reconhecido." );
    }

    /**Método que é chamado quando não é possível a recuperação de erros.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Falha na compilação.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$RubyParser$actions {


/** Aqui podemos adicionar código JAVA */

  private final RubyParser parser;

  /** Constructor */
  CUP$RubyParser$actions(RubyParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$RubyParser$do_action(
    int                        CUP$RubyParser$act_num,
    java_cup.runtime.lr_parser CUP$RubyParser$parser,
    java.util.Stack            CUP$RubyParser$stack,
    int                        CUP$RubyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$RubyParser$result;

      /* select the action based on the action number */
      switch (CUP$RubyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variavel ::= STRING 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("variavel",6, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variavel ::= IDENTIFICADOR ATRIBUICAO NUMERO 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("variavel",6, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arg ::= NUMERO 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("arg",5, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arg ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("arg",5, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // identificadores_funcao ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("identificadores_funcao",11, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // identificadores_funcao ::= IDENTIFICADOR VIRGULA identificadores_funcao 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("identificadores_funcao",11, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr_for ::= IDENTIFICADOR IN NUMERO DOIS_PONTOS2 NUMERO 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("expr_for",8, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= arg MENOR arg 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= arg MAIOR arg 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-2)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcao ::= DEF IDENTIFICADOR PARENTESE_ABERTURA identificadores_funcao PARENTESE_FECHAMENTO codigo END_MINUSCULO 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("funcao",10, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-6)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // repeticao_while ::= WHILE expr DO codigo END_MINUSCULO 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("repeticao_while",9, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // repeticao_for ::= FOR expr_for codigo END_MINUSCULO 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("repeticao_for",7, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-3)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cod_condicao ::= 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("cod_condicao",3, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cod_condicao ::= ELSE codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("cod_condicao",3, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cod_condicao ::= ELSIF expr codigo cod_condicao 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("cod_condicao",3, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-3)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // condicao ::= IF expr codigo cod_condicao END_MINUSCULO 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("condicao",2, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-4)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigo ::= variavel codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigo ::= funcao codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigo ::= repeticao_while codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= repeticao_for codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= condicao codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)).value;
		RESULT = start_val;
              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.elementAt(CUP$RubyParser$top-1)), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$RubyParser$parser.done_parsing();
          return CUP$RubyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= codigo 
            {
              Object RESULT =null;

              CUP$RubyParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RubyParser$stack.peek()), RESULT);
            }
          return CUP$RubyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

