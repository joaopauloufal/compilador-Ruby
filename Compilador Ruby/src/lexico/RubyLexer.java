/* The following code was generated by JFlex 1.6.1 */

package lexico;
import sintatico.Token;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/paulo/git/compilador-Ruby/Compilador Ruby/src/lexico/scanner.jflex</tt>
 */
public class RubyLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\110\1\3\1\1\22\0\1\3\1\77\1\105"+
    "\1\4\1\0\1\67\1\72\1\0\1\56\1\57\1\65\1\64\1\101"+
    "\1\21\1\17\1\66\1\7\1\15\2\14\4\14\2\10\1\102\1\104"+
    "\1\70\1\76\1\71\1\107\1\100\1\13\1\23\1\13\1\42\1\24"+
    "\1\16\1\25\1\5\1\26\1\106\1\5\1\11\1\5\1\27\11\5"+
    "\1\12\2\5\1\62\1\22\1\63\1\74\1\6\1\103\1\34\1\51"+
    "\1\50\1\46\1\20\1\37\1\55\1\41\1\45\1\106\1\52\1\36"+
    "\1\53\1\30\1\43\1\44\1\5\1\33\1\31\1\35\1\32\1\5"+
    "\1\40\1\54\1\47\1\5\1\60\1\73\1\61\1\75\6\0\1\110"+
    "\u1fa2\0\1\110\1\110\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\3\2\1\3\1\4\2\5\1\6\1\4"+
    "\1\7\22\4\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\1\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\2\40\1\41\1\42\2\3\1\43"+
    "\3\5\1\0\4\5\1\0\1\44\2\4\1\45\20\4"+
    "\1\46\1\4\1\47\1\50\1\4\1\51\6\4\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\4\5\1\0\1\4\1\73\2\4\1\74\1\4\1\75"+
    "\10\4\1\76\5\4\1\77\3\4\1\100\6\4\1\101"+
    "\1\102\1\103\1\104\2\5\1\4\1\105\2\4\1\106"+
    "\1\107\7\4\1\110\2\4\1\111\1\112\1\4\1\113"+
    "\1\4\1\114\2\4\1\115\4\4\2\5\1\4\1\116"+
    "\1\117\1\120\1\121\1\4\1\122\2\4\1\123\1\4"+
    "\1\124\1\125\1\126\1\4\1\127\1\130\1\131\1\132"+
    "\1\4\2\5\1\133\1\134\1\135\1\136\1\137\1\4"+
    "\1\140\2\5\1\141\6\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\5\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\222\0\u0124\0\u016d\0\u01b6"+
    "\0\u01ff\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe"+
    "\0\u0447\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646"+
    "\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0845\0\222"+
    "\0\222\0\222\0\222\0\222\0\222\0\u088e\0\u08d7\0\u0920"+
    "\0\u0969\0\u09b2\0\u09fb\0\u0a44\0\u0a8d\0\u0ad6\0\222\0\u0b1f"+
    "\0\u0b68\0\222\0\222\0\222\0\222\0\222\0\222\0\u0bb1"+
    "\0\u0bfa\0\222\0\u0c43\0\222\0\u0c8c\0\222\0\222\0\u0cd5"+
    "\0\u0d1e\0\222\0\u0d67\0\u0db0\0\u0df9\0\u0e42\0\u0e8b\0\u0ed4"+
    "\0\222\0\u0f1d\0\u0f66\0\222\0\u0faf\0\u0ff8\0\u1041\0\u108a"+
    "\0\u10d3\0\u111c\0\u1165\0\u11ae\0\u11f7\0\u1240\0\u1289\0\u12d2"+
    "\0\u131b\0\u1364\0\u13ad\0\u13f6\0\u01b6\0\u143f\0\u01b6\0\u01b6"+
    "\0\u1488\0\u01b6\0\u14d1\0\u151a\0\u1563\0\u15ac\0\u15f5\0\u163e"+
    "\0\222\0\u1687\0\222\0\u16d0\0\222\0\222\0\u1719\0\222"+
    "\0\222\0\u1762\0\222\0\222\0\222\0\222\0\222\0\222"+
    "\0\222\0\u17ab\0\u17f4\0\u183d\0\u1886\0\u18cf\0\u1918\0\u01b6"+
    "\0\u1961\0\u19aa\0\u01b6\0\u19f3\0\u01b6\0\u1a3c\0\u1a85\0\u1ace"+
    "\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\u01b6\0\u1c84\0\u1ccd"+
    "\0\u1d16\0\u1d5f\0\u1da8\0\u01b6\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc"+
    "\0\u1f15\0\u1f5e\0\u1fa7\0\u1ff0\0\u2039\0\u2082\0\222\0\222"+
    "\0\222\0\222\0\u20cb\0\u2114\0\u215d\0\u01b6\0\u21a6\0\u21ef"+
    "\0\u01b6\0\u01b6\0\u2238\0\u2281\0\u22ca\0\u2313\0\u235c\0\u23a5"+
    "\0\u23ee\0\u01b6\0\u2437\0\u2480\0\u01b6\0\u01b6\0\u24c9\0\u01b6"+
    "\0\u2512\0\u01b6\0\u255b\0\u25a4\0\u01b6\0\u25ed\0\u2636\0\u267f"+
    "\0\u26c8\0\u2711\0\u275a\0\u27a3\0\u01b6\0\u01b6\0\u01b6\0\u01b6"+
    "\0\u27ec\0\u01b6\0\u2835\0\u287e\0\u01b6\0\u28c7\0\u01b6\0\u01b6"+
    "\0\u01b6\0\u2910\0\u01b6\0\u01b6\0\u01b6\0\u01b6\0\u2959\0\u29a2"+
    "\0\u29eb\0\u01b6\0\u01b6\0\u01b6\0\u01b6\0\u01b6\0\u2a34\0\u01b6"+
    "\0\u2a7d\0\u2ac6\0\u01b6\0\u2b0f\0\u2b58\0\u2ba1\0\u2bea\0\u2c33"+
    "\0\u2c7c\0\u2cc5\0\u2d0e\0\u2d57\0\u2da0\0\u2de9\0\u2e32\0\u2e7b"+
    "\0\u2ec4\0\u2f0d\0\u2f56\0\u2f9f\0\u2fe8\0\u3031\0\u307a\0\u30c3"+
    "\0\u310c\0\u3155\0\u319e\0\u31e7\0\u3230";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\3\10\2\12\1\10\1\13\1\14\1\15\1\3"+
    "\1\16\1\17\3\10\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\10\1\26\1\27\2\10\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\10\1\37\2\10\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\10"+
    "\1\3\1\0\1\70\1\71\1\72\17\70\1\73\62\70"+
    "\1\74\3\70\113\0\1\5\111\0\1\6\105\0\1\7"+
    "\1\75\1\76\106\7\5\0\12\10\1\0\1\10\2\0"+
    "\33\10\30\0\1\10\1\77\10\0\1\100\1\101\1\102"+
    "\1\103\1\0\1\104\1\105\1\106\1\107\1\110\3\0"+
    "\1\110\11\0\1\102\1\106\14\0\1\103\43\0\2\12"+
    "\1\102\2\0\2\12\1\106\1\107\1\110\3\0\1\110"+
    "\11\0\1\102\1\106\60\0\2\107\3\0\2\107\1\0"+
    "\1\111\76\0\12\10\1\0\1\10\2\0\5\10\1\112"+
    "\5\10\1\113\17\10\30\0\1\10\1\77\77\0\1\114"+
    "\17\0\12\10\1\0\1\10\2\0\1\10\1\115\31\10"+
    "\30\0\1\10\1\77\6\0\12\10\1\0\1\10\2\0"+
    "\4\10\1\116\26\10\30\0\1\10\1\77\6\0\12\10"+
    "\1\0\1\117\2\0\20\10\1\120\12\10\30\0\1\10"+
    "\1\77\6\0\12\10\1\0\1\121\2\0\7\10\1\122"+
    "\23\10\30\0\1\10\1\77\6\0\12\10\1\0\1\10"+
    "\2\0\5\10\1\123\25\10\30\0\1\10\1\77\6\0"+
    "\12\10\1\0\1\124\2\0\33\10\30\0\1\10\1\77"+
    "\6\0\12\10\1\0\1\10\2\0\5\10\1\125\1\126"+
    "\4\10\1\127\17\10\30\0\1\10\1\77\6\0\12\10"+
    "\1\0\1\10\2\0\10\10\1\130\5\10\1\131\14\10"+
    "\30\0\1\10\1\77\6\0\12\10\1\0\1\10\2\0"+
    "\11\10\1\132\6\10\1\133\12\10\30\0\1\10\1\77"+
    "\6\0\12\10\1\0\1\10\2\0\16\10\1\134\14\10"+
    "\30\0\1\10\1\77\6\0\12\10\1\0\1\10\2\0"+
    "\10\10\1\135\22\10\30\0\1\10\1\77\6\0\12\10"+
    "\1\0\1\10\2\0\7\10\1\136\23\10\30\0\1\10"+
    "\1\77\6\0\12\10\1\0\1\10\2\0\5\10\1\137"+
    "\6\10\1\140\16\10\30\0\1\10\1\77\6\0\12\10"+
    "\1\0\1\141\2\0\20\10\1\142\12\10\30\0\1\10"+
    "\1\77\6\0\12\10\1\0\1\10\2\0\22\10\1\143"+
    "\10\10\30\0\1\10\1\77\6\0\12\10\1\0\1\10"+
    "\2\0\11\10\1\144\1\10\1\145\17\10\30\0\1\10"+
    "\1\77\6\0\12\10\1\0\1\146\2\0\10\10\1\147"+
    "\22\10\30\0\1\10\1\77\6\0\12\10\1\0\1\10"+
    "\2\0\20\10\1\150\12\10\30\0\1\10\1\77\77\0"+
    "\1\151\77\0\1\152\10\0\1\153\100\0\1\154\7\0"+
    "\1\155\110\0\1\156\102\0\1\157\1\160\4\0\1\161"+
    "\103\0\1\162\4\0\1\163\110\0\1\164\110\0\1\165"+
    "\110\0\1\166\110\0\1\167\110\0\1\170\12\0\1\70"+
    "\2\0\17\70\1\0\62\70\1\0\3\70\2\0\1\72"+
    "\213\0\1\171\5\0\1\76\115\0\1\100\1\101\1\102"+
    "\2\0\1\104\1\105\1\106\1\107\1\110\3\0\1\110"+
    "\11\0\1\102\1\106\60\0\2\101\3\0\2\101\1\106"+
    "\1\107\1\110\3\0\1\110\12\0\1\106\60\0\1\172"+
    "\1\173\2\0\4\173\1\0\1\173\2\0\2\173\7\0"+
    "\1\173\2\0\1\173\2\0\1\173\3\0\1\173\1\0"+
    "\2\173\46\0\1\174\1\101\1\102\2\0\2\174\1\106"+
    "\1\107\1\110\3\0\1\110\11\0\1\102\1\106\60\0"+
    "\1\104\1\101\1\102\2\0\2\104\1\106\1\107\1\110"+
    "\3\0\1\110\11\0\1\102\1\106\157\0\1\102\11\0"+
    "\2\107\3\0\2\107\1\106\1\0\1\110\3\0\1\110"+
    "\12\0\1\106\60\0\2\175\3\0\2\175\3\0\1\176"+
    "\42\0\1\176\31\0\12\10\1\0\1\10\2\0\6\10"+
    "\1\177\14\10\1\200\7\10\30\0\1\10\1\77\6\0"+
    "\12\10\1\0\1\10\2\0\6\10\1\201\24\10\30\0"+
    "\1\10\1\77\6\0\12\10\1\0\1\10\2\0\2\10"+
    "\1\202\30\10\30\0\1\10\1\77\6\0\12\10\1\0"+
    "\1\10\2\0\17\10\1\203\13\10\30\0\1\10\1\77"+
    "\6\0\12\10\1\0\1\10\2\0\31\10\1\204\1\10"+
    "\30\0\1\10\1\77\6\0\12\10\1\0\1\10\2\0"+
    "\12\10\1\205\20\10\30\0\1\10\1\77\6\0\12\10"+
    "\1\0\1\10\2\0\13\10\1\206\17\10\30\0\1\10"+
    "\1\77\6\0\12\10\1\0\1\10\2\0\21\10\1\207"+
    "\11\10\30\0\1\10\1\77\6\0\12\10\1\0\1\10"+
    "\2\0\12\10\1\210\1\211\7\10\1\212\7\10\30\0"+
    "\1\10\1\77\6\0\12\10\1\0\1\10\2\0\6\10"+
    "\1\213\3\10\1\214\10\10\1\215\7\10\30\0\1\10"+
    "\1\77\6\0\12\10\1\0\1\10\2\0\23\10\1\216"+
    "\7\10\30\0\1\10\1\77\6\0\12\10\1\0\1\10"+
    "\2\0\6\10\1\217\24\10\30\0\1\10\1\77\6\0"+
    "\12\10\1\0\1\10\2\0\22\10\1\220\10\10\30\0"+
    "\1\10\1\77\6\0\12\10\1\0\1\10\2\0\7\10"+
    "\1\221\23\10\30\0\1\10\1\77\6\0\12\10\1\0"+
    "\1\222\2\0\33\10\30\0\1\10\1\77\6\0\12\10"+
    "\1\0\1\10\2\0\13\10\1\223\17\10\30\0\1\10"+
    "\1\77\6\0\12\10\1\0\1\10\2\0\10\10\1\224"+
    "\22\10\30\0\1\10\1\77\6\0\12\10\1\0\1\225"+
    "\2\0\22\10\1\226\10\10\30\0\1\10\1\77\6\0"+
    "\12\10\1\0\1\10\2\0\12\10\1\227\20\10\30\0"+
    "\1\10\1\77\6\0\12\10\1\0\1\10\2\0\14\10"+
    "\1\230\16\10\30\0\1\10\1\77\6\0\12\10\1\0"+
    "\1\231\2\0\33\10\30\0\1\10\1\77\6\0\12\10"+
    "\1\0\1\10\2\0\6\10\1\232\24\10\30\0\1\10"+
    "\1\77\6\0\12\10\1\0\1\10\2\0\11\10\1\233"+
    "\21\10\30\0\1\10\1\77\6\0\12\10\1\0\1\10"+
    "\2\0\32\10\1\234\30\0\1\10\1\77\6\0\12\10"+
    "\1\0\1\235\2\0\33\10\30\0\1\10\1\77\6\0"+
    "\12\10\1\0\1\10\2\0\23\10\1\236\7\10\30\0"+
    "\1\10\1\77\77\0\1\237\110\0\1\240\110\0\1\241"+
    "\110\0\1\242\21\0\1\172\1\173\1\102\1\0\4\173"+
    "\1\0\1\173\2\0\2\173\7\0\1\173\1\0\1\102"+
    "\1\173\2\0\1\173\3\0\1\173\1\0\2\173\46\0"+
    "\2\243\1\102\1\0\4\243\1\0\1\243\2\0\2\243"+
    "\7\0\1\243\1\0\1\102\1\243\2\0\1\243\3\0"+
    "\1\243\1\0\2\243\46\0\1\244\1\101\1\102\2\0"+
    "\2\244\1\106\1\107\1\110\3\0\1\110\11\0\1\102"+
    "\1\106\60\0\2\175\3\0\2\175\1\106\20\0\1\106"+
    "\60\0\2\175\3\0\2\175\100\0\12\10\1\0\1\10"+
    "\2\0\7\10\1\245\23\10\30\0\1\10\1\77\6\0"+
    "\12\10\1\0\1\246\2\0\22\10\1\247\10\10\30\0"+
    "\1\10\1\77\6\0\12\10\1\0\1\10\2\0\3\10"+
    "\1\250\27\10\30\0\1\10\1\77\6\0\12\10\1\0"+
    "\1\10\2\0\12\10\1\251\20\10\30\0\1\10\1\77"+
    "\6\0\12\10\1\0\1\10\2\0\14\10\1\252\16\10"+
    "\30\0\1\10\1\77\6\0\12\10\1\0\1\253\2\0"+
    "\33\10\30\0\1\10\1\77\6\0\12\10\1\0\1\10"+
    "\2\0\22\10\1\254\10\10\30\0\1\10\1\77\6\0"+
    "\12\10\1\0\1\255\2\0\33\10\30\0\1\10\1\77"+
    "\6\0\12\10\1\0\1\256\2\0\33\10\30\0\1\10"+
    "\1\77\6\0\12\10\1\0\1\10\2\0\25\10\1\257"+
    "\5\10\30\0\1\10\1\77\6\0\12\10\1\0\1\10"+
    "\2\0\7\10\1\260\1\261\22\10\30\0\1\10\1\77"+
    "\6\0\12\10\1\0\1\10\2\0\20\10\1\262\12\10"+
    "\30\0\1\10\1\77\6\0\12\10\1\0\1\263\2\0"+
    "\33\10\30\0\1\10\1\77\6\0\12\10\1\0\1\10"+
    "\2\0\11\10\1\264\21\10\30\0\1\10\1\77\6\0"+
    "\12\10\1\0\1\265\2\0\33\10\30\0\1\10\1\77"+
    "\6\0\12\10\1\0\1\10\2\0\5\10\1\266\25\10"+
    "\30\0\1\10\1\77\6\0\12\10\1\0\1\10\2\0"+
    "\6\10\1\267\24\10\30\0\1\10\1\77\6\0\12\10"+
    "\1\0\1\10\2\0\5\10\1\270\25\10\30\0\1\10"+
    "\1\77\6\0\12\10\1\0\1\10\2\0\13\10\1\271"+
    "\17\10\30\0\1\10\1\77\6\0\12\10\1\0\1\10"+
    "\2\0\6\10\1\272\24\10\30\0\1\10\1\77\6\0"+
    "\12\10\1\0\1\10\2\0\22\10\1\273\10\10\30\0"+
    "\1\10\1\77\6\0\12\10\1\0\1\10\2\0\13\10"+
    "\1\274\17\10\30\0\1\10\1\77\6\0\12\10\1\0"+
    "\1\275\2\0\33\10\30\0\1\10\1\77\6\0\12\10"+
    "\1\0\1\10\2\0\6\10\1\276\24\10\30\0\1\10"+
    "\1\77\6\0\12\10\1\0\1\10\2\0\22\10\1\277"+
    "\10\10\30\0\1\10\1\77\6\0\12\10\1\0\1\10"+
    "\2\0\11\10\1\300\21\10\30\0\1\10\1\77\6\0"+
    "\12\10\1\0\1\10\2\0\7\10\1\301\23\10\30\0"+
    "\1\10\1\77\10\0\2\302\1\102\1\0\4\302\1\0"+
    "\1\302\2\0\2\302\7\0\1\302\1\0\1\102\1\302"+
    "\2\0\1\302\3\0\1\302\1\0\2\302\46\0\1\303"+
    "\1\101\1\102\2\0\2\303\1\106\1\107\1\110\3\0"+
    "\1\110\11\0\1\102\1\106\56\0\12\10\1\0\1\10"+
    "\2\0\10\10\1\304\22\10\30\0\1\10\1\77\6\0"+
    "\12\10\1\0\1\10\2\0\14\10\1\305\16\10\30\0"+
    "\1\10\1\77\6\0\12\10\1\0\1\10\2\0\4\10"+
    "\1\306\26\10\30\0\1\10\1\77\6\0\12\10\1\0"+
    "\1\10\2\0\10\10\1\307\22\10\30\0\1\10\1\77"+
    "\6\0\12\10\1\0\1\10\2\0\13\10\1\310\17\10"+
    "\30\0\1\10\1\77\6\0\12\10\1\0\1\10\2\0"+
    "\6\10\1\311\24\10\30\0\1\10\1\77\6\0\12\10"+
    "\1\0\1\10\2\0\14\10\1\312\16\10\30\0\1\10"+
    "\1\77\6\0\12\10\1\0\1\10\2\0\7\10\1\313"+
    "\23\10\30\0\1\10\1\77\6\0\12\10\1\0\1\10"+
    "\2\0\10\10\1\314\22\10\30\0\1\10\1\77\6\0"+
    "\12\10\1\0\1\10\2\0\24\10\1\315\6\10\30\0"+
    "\1\10\1\77\6\0\12\10\1\0\1\10\2\0\10\10"+
    "\1\316\22\10\30\0\1\10\1\77\6\0\12\10\1\0"+
    "\1\10\2\0\6\10\1\317\24\10\30\0\1\10\1\77"+
    "\6\0\12\10\1\0\1\320\2\0\33\10\30\0\1\10"+
    "\1\77\6\0\12\10\1\0\1\321\2\0\33\10\30\0"+
    "\1\10\1\77\6\0\12\10\1\0\1\10\2\0\5\10"+
    "\1\322\25\10\30\0\1\10\1\77\6\0\12\10\1\0"+
    "\1\10\2\0\23\10\1\323\7\10\30\0\1\10\1\77"+
    "\6\0\12\10\1\0\1\10\2\0\6\10\1\324\24\10"+
    "\30\0\1\10\1\77\6\0\12\10\1\0\1\10\2\0"+
    "\5\10\1\325\25\10\30\0\1\10\1\77\6\0\12\10"+
    "\1\0\1\10\2\0\27\10\1\326\3\10\30\0\1\10"+
    "\1\77\6\0\12\10\1\0\1\10\2\0\13\10\1\327"+
    "\17\10\30\0\1\10\1\77\10\0\2\330\1\102\1\0"+
    "\4\330\1\0\1\330\2\0\2\330\7\0\1\330\1\0"+
    "\1\102\1\330\2\0\1\330\3\0\1\330\1\0\2\330"+
    "\46\0\1\331\1\101\1\102\2\0\2\331\1\106\1\107"+
    "\1\110\3\0\1\110\11\0\1\102\1\106\56\0\12\10"+
    "\1\0\1\332\2\0\33\10\30\0\1\10\1\77\6\0"+
    "\12\10\1\0\1\10\2\0\6\10\1\333\24\10\30\0"+
    "\1\10\1\77\6\0\12\10\1\0\1\334\2\0\33\10"+
    "\30\0\1\10\1\77\6\0\12\10\1\0\1\10\2\0"+
    "\5\10\1\335\25\10\30\0\1\10\1\77\6\0\12\10"+
    "\1\0\1\10\2\0\12\10\1\336\20\10\30\0\1\10"+
    "\1\77\6\0\12\10\1\0\1\337\2\0\33\10\30\0"+
    "\1\10\1\77\6\0\12\10\1\0\1\340\2\0\33\10"+
    "\30\0\1\10\1\77\10\0\2\341\1\102\1\0\4\341"+
    "\1\0\1\341\2\0\2\341\7\0\1\341\1\0\1\102"+
    "\1\341\2\0\1\341\3\0\1\341\1\0\2\341\46\0"+
    "\1\342\1\101\1\102\2\0\2\342\1\106\1\107\1\110"+
    "\3\0\1\110\11\0\1\102\1\106\56\0\12\10\1\0"+
    "\1\10\2\0\23\10\1\343\7\10\30\0\1\10\1\77"+
    "\10\0\2\344\1\102\1\0\4\344\1\0\1\344\2\0"+
    "\2\344\7\0\1\344\1\0\1\102\1\344\2\0\1\344"+
    "\3\0\1\344\1\0\2\344\46\0\1\345\1\101\1\102"+
    "\2\0\2\345\1\106\1\107\1\110\3\0\1\110\11\0"+
    "\1\102\1\106\60\0\2\346\1\102\1\0\4\346\1\0"+
    "\1\346\2\0\2\346\7\0\1\346\1\0\1\102\1\346"+
    "\2\0\1\346\3\0\1\346\1\0\2\346\46\0\1\347"+
    "\1\101\1\102\2\0\2\347\1\106\1\107\1\110\3\0"+
    "\1\110\11\0\1\102\1\106\60\0\2\350\1\102\1\0"+
    "\4\350\1\0\1\350\2\0\2\350\7\0\1\350\1\0"+
    "\1\102\1\350\2\0\1\350\3\0\1\350\1\0\2\350"+
    "\46\0\1\351\1\101\1\102\2\0\2\351\1\106\1\107"+
    "\1\110\3\0\1\110\11\0\1\102\1\106\60\0\2\352"+
    "\1\102\1\0\4\352\1\0\1\352\2\0\2\352\7\0"+
    "\1\352\1\0\1\102\1\352\2\0\1\352\3\0\1\352"+
    "\1\0\2\352\46\0\1\353\1\101\1\102\2\0\2\353"+
    "\1\106\1\107\1\110\3\0\1\110\11\0\1\102\1\106"+
    "\60\0\2\354\1\102\1\0\4\354\1\0\1\354\2\0"+
    "\2\354\7\0\1\354\1\0\1\102\1\354\2\0\1\354"+
    "\3\0\1\354\1\0\2\354\46\0\1\355\1\101\1\102"+
    "\2\0\2\355\1\106\1\107\1\110\3\0\1\110\11\0"+
    "\1\102\1\106\60\0\2\356\1\102\1\0\4\356\1\0"+
    "\1\356\2\0\2\356\7\0\1\356\1\0\1\102\1\356"+
    "\2\0\1\356\3\0\1\356\1\0\2\356\46\0\1\357"+
    "\1\101\1\102\2\0\2\357\1\106\1\107\1\110\3\0"+
    "\1\110\11\0\1\102\1\106\60\0\2\360\1\102\1\0"+
    "\4\360\1\0\1\360\2\0\2\360\7\0\1\360\1\0"+
    "\1\102\1\360\2\0\1\360\3\0\1\360\1\0\2\360"+
    "\46\0\1\361\1\101\1\102\2\0\2\361\1\106\1\107"+
    "\1\110\3\0\1\110\11\0\1\102\1\106\60\0\2\362"+
    "\1\102\1\0\4\362\1\0\1\362\2\0\2\362\7\0"+
    "\1\362\1\0\1\102\1\362\2\0\1\362\3\0\1\362"+
    "\1\0\2\362\46\0\1\363\1\101\1\102\2\0\2\363"+
    "\1\106\1\107\1\110\3\0\1\110\11\0\1\102\1\106"+
    "\60\0\2\364\1\102\1\0\4\364\1\0\1\364\2\0"+
    "\2\364\7\0\1\364\1\0\1\102\1\364\2\0\1\364"+
    "\3\0\1\364\1\0\2\364\46\0\1\365\1\101\1\102"+
    "\2\0\2\365\1\106\1\107\1\110\3\0\1\110\11\0"+
    "\1\102\1\106\60\0\2\366\1\102\1\0\4\366\1\0"+
    "\1\366\2\0\2\366\7\0\1\366\1\0\1\102\1\366"+
    "\2\0\1\366\3\0\1\366\1\0\2\366\46\0\1\367"+
    "\1\101\1\102\2\0\2\367\1\106\1\107\1\110\3\0"+
    "\1\110\11\0\1\102\1\106\60\0\2\370\1\102\1\0"+
    "\4\370\1\0\1\370\2\0\2\370\7\0\1\370\1\0"+
    "\1\102\1\370\2\0\1\370\3\0\1\370\1\0\2\370"+
    "\46\0\1\371\1\101\1\102\2\0\2\371\1\106\1\107"+
    "\1\110\3\0\1\110\11\0\1\102\1\106\62\0\1\102"+
    "\24\0\1\102\61\0\1\372\1\101\1\102\2\0\2\372"+
    "\1\106\1\107\1\110\3\0\1\110\11\0\1\102\1\106"+
    "\60\0\1\373\1\101\1\102\2\0\2\373\1\106\1\107"+
    "\1\110\3\0\1\110\11\0\1\102\1\106\60\0\1\374"+
    "\1\101\1\102\2\0\2\374\1\106\1\107\1\110\3\0"+
    "\1\110\11\0\1\102\1\106\60\0\1\375\1\101\1\102"+
    "\2\0\2\375\1\106\1\107\1\110\3\0\1\110\11\0"+
    "\1\102\1\106\60\0\2\101\1\102\2\0\2\101\1\106"+
    "\1\107\1\110\3\0\1\110\11\0\1\102\1\106\51\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12921];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\32\1\6\11\11\1\1\11"+
    "\2\1\6\11\2\1\1\11\1\1\1\11\1\1\2\11"+
    "\2\1\1\11\1\0\4\1\1\0\1\11\2\1\1\11"+
    "\34\1\1\11\1\1\1\11\1\1\2\11\1\1\2\11"+
    "\1\1\7\11\4\1\1\0\40\1\4\11\107\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

	StringBuffer string = new StringBuffer();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RubyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 220) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return null;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caractere ilegal: " + yytext());
            }
          case 98: break;
          case 2: 
            { 
            }
          case 99: break;
          case 3: 
            { return new Symbol(Token.COMENTARIO, yychar, yyline);
            }
          case 100: break;
          case 4: 
            { return new Symbol(Token.IDENTIFICADOR, yychar, yyline);
            }
          case 101: break;
          case 5: 
            { return new Symbol(Token.NUMERO, yychar, yyline);
            }
          case 102: break;
          case 6: 
            { return new Symbol(Token.PONTO, yychar, yyline);
            }
          case 103: break;
          case 7: 
            { return new Symbol(Token.MENOS, yychar, yyline);
            }
          case 104: break;
          case 8: 
            { return new Symbol(Token.PARENTESE_ABERTURA, yychar, yyline);
            }
          case 105: break;
          case 9: 
            { return new Symbol(Token.PARENTESE_FECHAMENTO, yychar, yyline);
            }
          case 106: break;
          case 10: 
            { return new Symbol(Token.CHAVE_ABERTURA, yychar, yyline);
            }
          case 107: break;
          case 11: 
            { return new Symbol(Token.CHAVE_FECHAMENTO, yychar, yyline);
            }
          case 108: break;
          case 12: 
            { return new Symbol(Token.COLCHETE_ABERTURA, yychar, yyline);
            }
          case 109: break;
          case 13: 
            { return new Symbol(Token.COLCHETE_FECHAMENTO, yychar, yyline);
            }
          case 110: break;
          case 14: 
            { return new Symbol(Token.MAIS, yychar, yyline);
            }
          case 111: break;
          case 15: 
            { return new Symbol(Token.VEZES, yychar, yyline);
            }
          case 112: break;
          case 16: 
            { return new Symbol(Token.BARRA, yychar, yyline);
            }
          case 113: break;
          case 17: 
            { return new Symbol(Token.PORCENTAGEM, yychar, yyline);
            }
          case 114: break;
          case 18: 
            { return new Symbol(Token.MENOR, yychar, yyline);
            }
          case 115: break;
          case 19: 
            { return new Symbol(Token.MAIOR, yychar, yyline);
            }
          case 116: break;
          case 20: 
            { return new Symbol(Token.E_COMERCIAL, yychar, yyline);
            }
          case 117: break;
          case 21: 
            { return new Symbol(Token.BARRA_VERTICAL, yychar, yyline);
            }
          case 118: break;
          case 22: 
            { return new Symbol(Token.POTENCIACAO, yychar, yyline);
            }
          case 119: break;
          case 23: 
            { return new Symbol(Token.TIL, yychar, yyline);
            }
          case 120: break;
          case 24: 
            { return new Symbol(Token.ATRIBUICAO, yychar, yyline);
            }
          case 121: break;
          case 25: 
            { return new Symbol(Token.ARROBA, yychar, yyline);
            }
          case 122: break;
          case 26: 
            { return new Symbol(Token.VIRGULA, yychar, yyline);
            }
          case 123: break;
          case 27: 
            { return new Symbol(Token.DOIS_PONTOS, yychar, yyline);
            }
          case 124: break;
          case 28: 
            { return new Symbol(Token.APOSTROFO, yychar, yyline);
            }
          case 125: break;
          case 29: 
            { return new Symbol(Token.PONTO_E_VIRGULA, yychar, yyline);
            }
          case 126: break;
          case 30: 
            { string.setLength(0); yybegin(STRING);
            }
          case 127: break;
          case 31: 
            { string.append(yytext());
            }
          case 128: break;
          case 32: 
            { yybegin(YYINITIAL);
            }
          case 129: break;
          case 33: 
            { string.append('\\');
            }
          case 130: break;
          case 34: 
            { yybegin(YYINITIAL);
									return new Symbol(Token.STRING, string.toString());
            }
          case 131: break;
          case 35: 
            { return new Symbol(Token.TIPO2, yychar, yyline);
            }
          case 132: break;
          case 36: 
            { return new Symbol(Token.DOIS_PONTOS2, yychar, yyline);
            }
          case 133: break;
          case 37: 
            { return new Symbol(Token.DECREMENTO, yychar, yyline);
            }
          case 134: break;
          case 38: 
            { return new Symbol(Token.OR, yychar, yyline);
            }
          case 135: break;
          case 39: 
            { return new Symbol(Token.IN, yychar, yyline);
            }
          case 136: break;
          case 40: 
            { return new Symbol(Token.IF, yychar, yyline);
            }
          case 137: break;
          case 41: 
            { return new Symbol(Token.DO, yychar, yyline);
            }
          case 138: break;
          case 42: 
            { return new Symbol(Token.INCREMENTO, yychar, yyline);
            }
          case 139: break;
          case 43: 
            { return new Symbol(Token.VEZES_VEZES, yychar, yyline);
            }
          case 140: break;
          case 44: 
            { return new Symbol(Token.INCREMENTO_MULTIP, yychar, yyline);
            }
          case 141: break;
          case 45: 
            { return new Symbol(Token.BARRA_BARRA, yychar, yyline);
            }
          case 142: break;
          case 46: 
            { return new Symbol(Token.INCREMENTO_DIVISAO, yychar, yyline);
            }
          case 143: break;
          case 47: 
            { return new Symbol(Token.PORCENTAGEM_IGUAL, yychar, yyline);
            }
          case 144: break;
          case 48: 
            { return new Symbol(Token.MENOR_MENOR, yychar, yyline);
            }
          case 145: break;
          case 49: 
            { return new Symbol(Token.DIFERENTE2, yychar, yyline);
            }
          case 146: break;
          case 50: 
            { return new Symbol(Token.MENOR_OU_IGUAL, yychar, yyline);
            }
          case 147: break;
          case 51: 
            { return new Symbol(Token.MAIOR_MAIOR, yychar, yyline);
            }
          case 148: break;
          case 52: 
            { return new Symbol(Token.MAIOR_OU_IGUAL, yychar, yyline);
            }
          case 149: break;
          case 53: 
            { return new Symbol(Token.E_COMERCIAL_IGUAL, yychar, yyline);
            }
          case 150: break;
          case 54: 
            { return new Symbol(Token.BARRA_VERTICAL_IGUAL, yychar, yyline);
            }
          case 151: break;
          case 55: 
            { return new Symbol(Token.PONTENCIACAO_IGUAL, yychar, yyline);
            }
          case 152: break;
          case 56: 
            { return new Symbol(Token.IGUAL_IGUAL, yychar, yyline);
            }
          case 153: break;
          case 57: 
            { return new Symbol(Token.DIFERENTE1, yychar, yyline);
            }
          case 154: break;
          case 58: 
            { string.append('\"');
            }
          case 155: break;
          case 59: 
            { return new Symbol(Token.END_MINUSCULO, yychar, yyline);
            }
          case 156: break;
          case 60: 
            { return new Symbol(Token.END_MAIUSCULO, yychar, yyline);
            }
          case 157: break;
          case 61: 
            { return new Symbol(Token.NOT, yychar, yyline);
            }
          case 158: break;
          case 62: 
            { return new Symbol(Token.AND, yychar, yyline);
            }
          case 159: break;
          case 63: 
            { return new Symbol(Token.FOR, yychar, yyline);
            }
          case 160: break;
          case 64: 
            { return new Symbol(Token.DEF, yychar, yyline);
            }
          case 161: break;
          case 65: 
            { return new Symbol(Token.MULTIP_MULTIP_IGUAL, yychar, yyline);
            }
          case 162: break;
          case 66: 
            { return new Symbol(Token.INCREMENTO_DIVISAO_DIVISAO, yychar, yyline);
            }
          case 163: break;
          case 67: 
            { return new Symbol(Token.MENOR_MENOR_IGUAL, yychar, yyline);
            }
          case 164: break;
          case 68: 
            { return new Symbol(Token.MAIOR_MAIOR_IGUAL, yychar, yyline);
            }
          case 165: break;
          case 69: 
            { return new Symbol(Token.ELSE, yychar, yyline);
            }
          case 166: break;
          case 70: 
            { return new Symbol(Token.NEXT, yychar, yyline);
            }
          case 167: break;
          case 71: 
            { return new Symbol(Token.SELF, yychar, yyline);
            }
          case 168: break;
          case 72: 
            { return new Symbol(Token.REDO, yychar, yyline);
            }
          case 169: break;
          case 73: 
            { return new Symbol(Token.TRUE, yychar, yyline);
            }
          case 170: break;
          case 74: 
            { return new Symbol(Token.THEN, yychar, yyline);
            }
          case 171: break;
          case 75: 
            { return new Symbol(Token.WHEN, yychar, yyline);
            }
          case 172: break;
          case 76: 
            { return new Symbol(Token.PUTS, yychar, yyline);
            }
          case 173: break;
          case 77: 
            { return new Symbol(Token.CASE, yychar, yyline);
            }
          case 174: break;
          case 78: 
            { return new Symbol(Token.ELSIF, yychar, yyline);
            }
          case 175: break;
          case 79: 
            { return new Symbol(Token.BEGIN_MAIUSCULO, yychar, yyline);
            }
          case 176: break;
          case 80: 
            { return new Symbol(Token.SUPER, yychar, yyline);
            }
          case 177: break;
          case 81: 
            { return new Symbol(Token.UNTIL, yychar, yyline);
            }
          case 178: break;
          case 82: 
            { return new Symbol(Token.UNDEF, yychar, yyline);
            }
          case 179: break;
          case 83: 
            { return new Symbol(Token.RETRY, yychar, yyline);
            }
          case 180: break;
          case 84: 
            { return new Symbol(Token.ALIAS, yychar, yyline);
            }
          case 181: break;
          case 85: 
            { return new Symbol(Token.FALSE, yychar, yyline);
            }
          case 182: break;
          case 86: 
            { return new Symbol(Token.WHILE, yychar, yyline);
            }
          case 183: break;
          case 87: 
            { return new Symbol(Token.YIELD, yychar, yyline);
            }
          case 184: break;
          case 88: 
            { return new Symbol(Token.CLASS, yychar, yyline);
            }
          case 185: break;
          case 89: 
            { return new Symbol(Token.BEGIN_MINUSCULO, yychar, yyline);
            }
          case 186: break;
          case 90: 
            { return new Symbol(Token.BREAK, yychar, yyline);
            }
          case 187: break;
          case 91: 
            { return new Symbol(Token.ENSURE, yychar, yyline);
            }
          case 188: break;
          case 92: 
            { return new Symbol(Token.UNLESS, yychar, yyline);
            }
          case 189: break;
          case 93: 
            { return new Symbol(Token.RESCUE, yychar, yyline);
            }
          case 190: break;
          case 94: 
            { return new Symbol(Token.RETURN, yychar, yyline);
            }
          case 191: break;
          case 95: 
            { return new Symbol(Token.ASSERT, yychar, yyline);
            }
          case 192: break;
          case 96: 
            { return new Symbol(Token.MODULE, yychar, yyline);
            }
          case 193: break;
          case 97: 
            { return new Symbol(Token.DEFINED, yychar, yyline);
            }
          case 194: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
