package sintatico;
import java_cup.runtime.*;




parser code /**Código para erros de sintaxe.*/
{:

	

    /**Método que é chamado automaticamente antes de um erro de sintaxe.*/
    public void syntax_error(Symbol s){
        System.out.println("Erro na linha " + (s.right+1) +", Coluna "+s.left+ ". ID "
        +s.value + " não reconhecido." );
    }

    /**Método que é chamado quando não é possível a recuperação de erros.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Falha na compilação.");
    }
:}


action code
{:

  int inc = 0;

  public String quebraDeLinha(){
  
  	return "\n";
  
  }
:}


/* Aqui espeficicamos os terminais da linguagem. */
terminal
 BEGIN_MAIUSCULO, ENSURE, ASSERT, SELF, WHEN, END_MAIUSCULO, FALSE, NOT, SUPER, ALIAS, DEFINED, OR, THEN, YIELD , AND, REDO, TRUE,
	ELSE, IN, RESCUE, UNDEF, BREAK, ELSIF, MODULE, RETRY, UNLESS, NEXT, RETURN, BEGIN_MINUSCULO, CLASS, DEF, FOR, WHILE, UNTIL, DO, IF, END_MINUSCULO,
	PARENTESE_ABERTURA, PARENTESE_FECHAMENTO, CHAVE_ABERTURA, CHAVE_FECHAMENTO, COLCHETE_ABERTURA, COLCHETE_FECHAMENTO, MAIS, MENOS, VEZES, BARRA,
	BARRA_BARRA, PORCENTAGEM, MENOR_MENOR, MAIOR_MAIOR, E_COMERCIAL, BARRA_VERTICAL, POTENCIACAO, TIL, MENOR, MAIOR, MENOR_OU_IGUAL, MAIOR_OU_IGUAL,
	IGUAL_IGUAL, DIFERENTE1, DIFERENTE2, ARROBA, VIRGULA, DOIS_PONTOS, PONTO, DOIS_PONTOS2, APOSTROFO, ATRIBUICAO, PONTO_E_VIRGULA, INCREMENTO,
	DECREMENTO, INCREMENTO_MULTIP, INCREMENTO_DIVISAO, INCREMENTO_DIVISAO_DIVISAO, PORCENTAGEM_IGUAL, E_COMERCIAL_IGUAL, BARRA_VERTICAL_IGUAL, PONTENCIACAO_IGUAL,
	MAIOR_MAIOR_IGUAL, MENOR_MENOR_IGUAL, MULTIP_MULTIP_IGUAL, COMENTARIO, NUMERO, IDENTIFICADOR, TIPO2, PUTS, STRING, QUEBRA_DE_LINHA, CASE, VEZES_VEZES;



/*
* Aqui estão os não-terminais

start with program;
*/
non terminal program, codigo, condicao, cod_condicao, expr, arg, variavel, repeticao_for, expr_for, repeticao_while, 
classe, funcao, identificadores_funcao;


/* Precedencias */
precedence left MAIS, MENOS;
precedence left VEZES, BARRA;

/*  Declaracao da gramatica  */

program ::= codigo;
codigo ::= condicao codigo
		| repeticao_for codigo
		| repeticao_while codigo
		| funcao codigo
		| classe codigo		
		| variavel codigo
		| "";


//Gramaticas Condicao, repeticao_for, repeticao_while, funcao, classe
condicao ::= {: System.out.print("IF"); :} IF expr {: System.out.print("\n |-- "); :} codigo cod_condicao END_MINUSCULO;

cod_condicao ::= {: System.out.print("ELSIF"); :} ELSIF expr {: System.out.print("\n |-- "); :} codigo cod_condicao
		| {: System.out.print("ELSE"); :} ELSE {: System.out.print("\n |-- "); :} codigo 
		|"";

repeticao_for ::= FOR {: System.out.print("FOR"); :} expr_for {: System.out.print("\n |--"); :} codigo END_MINUSCULO;// Tem que ter o espcao entre os dois pontos. Ex.: 0 .. 5

repeticao_while ::= WHILE {: System.out.print("WHILE"); :} expr DO {: System.out.print("\n |-- "); :} codigo END_MINUSCULO;

funcao ::= DEF {: System.out.print("DEF"); :} IDENTIFICADOR  PARENTESE_ABERTURA {: System.out.print("("); :} identificadores_funcao PARENTESE_FECHAMENTO {: System.out.print(")"); :} {: System.out.print("\n |-- "); :} codigo END_MINUSCULO;

classe ::= CLASS {: System.out.print("CLASS "); :} IDENTIFICADOR {: System.out.print("\n |-- "); :} codigo END_MINUSCULO;


//Gramaticas complementares
expr ::= arg  MAIOR {: System.out.print(" > "); :} arg
		| arg MENOR {: System.out.print(" < "); :} arg
		;
		
expr_for ::= IDENTIFICADOR {: System.out.print(" IDENTIFICADOR "); :} IN {: System.out.print(" IN "); :} NUMERO {: System.out.print(" NUMERO"); :} DOIS_PONTOS2 {: System.out.print(" .. "); :} NUMERO {: System.out.print("NUMERO"); :};

identificadores_funcao ::= IDENTIFICADOR {: System.out.print("IDENTIFICADOR"); :} VIRGULA {: System.out.print(", "); :} identificadores_funcao
		| IDENTIFICADOR {: System.out.print(" IDENTIFICADOR"); :};
		
arg ::= IDENTIFICADOR {: System.out.print(" IDENTIFICADOR"); :} |  NUMERO {: System.out.print("NUMERO"); :};

variavel ::= IDENTIFICADOR {: System.out.print("IDENTIFICADOR"); :} ATRIBUICAO {: System.out.print(" = "); :} NUMERO {: System.out.println("NUMERO"); :} | STRING {: System.out.println("STRING"); :};





// Express�es matem�ticas
/*expre_matematica ::= expressao:e {: System.out.println("Resultado = "+e); :}  pcoma;

expressao ::= expressao:e1 MAIS expressao:e2 {: RESULT = new Integer(e1.intValue()+e2.intValue()); :}
        |expressao:e1 MENOS EXPR:e2 {: RESULT = new Integer(e1.intValue()-e2.intValue()); :}
        |expressao:e1 VEZES EXPR:e2 {: RESULT = new Integer(e1.intValue()*e2.intValue()); :}
        |expressao:e1 BARRA EXPR:e2 {: RESULT = new Integer(e1.intValue()/e2.intValue()); :};              

*/
